"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseTools {
    getConformance(server) {
        const conformanceUrl = server + (server.endsWith('/') ? '' : '/') + 'metadata';
        return new Promise((resolve, reject) => {
            rp({ url: conformanceUrl, json: true })
                .then((results) => resolve(results))
                .catch((err) => reject(err));
        });
    }
    getNextResources(url, resourceType) {
        console.log(`Getting next page of resources of type ${resourceType}`);
        return new Promise((resolve, reject) => {
            rp({ url: url, json: true })
                .then((body) => {
                console.log(`Found ${body.total} more resources for ${resourceType}`);
                let resources = (body.entry || []).map((entry) => entry.resource);
                const foundNextLink = (body.link || []).find((link) => link.relation === 'next');
                if (foundNextLink) {
                    this.getNextResources(foundNextLink.url, resourceType)
                        .then((nextResources) => {
                        resources = resources.concat(nextResources);
                        return resolve(resources);
                    })
                        .catch((nextErr) => reject(nextErr));
                }
                else {
                    return resolve(resources);
                }
            })
                .catch((err) => reject(err));
        });
    }
    getAllResourcesByType(server, resourceTypes) {
        return new Promise((resolve, reject) => {
            const nextResourceType = resourceTypes.pop();
            const url = server + (server.endsWith('/') ? '' : '/') + nextResourceType;
            console.log(`Getting all resources of type ${nextResourceType}`);
            this.getNextResources(url, nextResourceType)
                .then((resources) => {
                if (resourceTypes.length > 0) {
                    this.getAllResourcesByType(server, resourceTypes)
                        .then((nextResources) => {
                        resources = resources.concat(nextResources);
                        resolve(resources);
                    })
                        .catch((err) => reject(err));
                }
                else {
                    resolve(resources);
                }
            })
                .catch((err) => reject(err));
        });
    }
    getAllResources(server) {
        return new Promise((resolve, reject) => {
            this.getConformance(server)
                .then((conformance) => {
                let promises = [];
                const resourceTypes = [];
                (conformance.rest || []).forEach((rest) => {
                    (rest.resource || []).forEach((resource) => resourceTypes.push(resource.type));
                });
                return this.getAllResourcesByType(server, resourceTypes);
            })
                .then((allResources) => allResources)
                .catch((err) => reject(err));
        });
    }
    getResource(server, resourceType, id) {
        const options = {
            method: 'GET',
            url: server + (server.endsWith('/') ? '' : '/') + resourceType + '/' + id,
            json: true
        };
        return new Promise((resolve, reject) => {
            rp(options)
                .then((results) => resolve(results))
                .catch((err) => reject(err));
        });
    }
    saveResource(server, resource) {
        const options = {
            method: 'PUT',
            url: server + (server.endsWith('/') ? '' : '/') + resource.resourceType + '/' + resource.id,
            json: true,
            body: resource
        };
        return rp(options);
    }
    printError(err) {
        if (err.error && err.error.resourceType === 'OperationOutcome') {
            if (err.error.issue && err.error.issue.length > 0) {
                err.error.issue.forEach((issue) => console.error(issue.diagnostics));
            }
            else if (err.err.text && err.error.text.div) {
                console.error(err.error.text.div);
            }
            else {
                console.error(err);
            }
        }
        else {
            console.error(err);
        }
    }
}
exports.BaseTools = BaseTools;
//# sourceMappingURL=data:application/json;base64,