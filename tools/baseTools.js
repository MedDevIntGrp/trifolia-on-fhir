"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const _ = require("underscore");
class BaseTools {
    getConformance(server) {
        return new Promise((resolve, reject) => {
            const conformanceUrl = server + (server.endsWith('/') ? '' : '/') + 'metadata';
            request({ url: conformanceUrl, json: true }, (err, response, body) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(body);
                }
            });
        });
    }
    getNextResources(url, resourceType) {
        console.log(`Getting next page of resources of type ${resourceType}`);
        return new Promise((resolve, reject) => {
            request({ url: url, json: true }, (err, response, body) => {
                if (err) {
                    reject(err);
                    return;
                }
                console.log(`Found ${body.total} more resources for ${resourceType}`);
                let resources = _.map(body.entry, (entry) => entry.resource);
                const foundNextLink = _.find(body.link, (link) => link.relation === 'next');
                if (foundNextLink) {
                    this.getNextResources(foundNextLink.url, resourceType)
                        .then((nextResources) => {
                        resources = resources.concat(nextResources);
                        resolve(resources);
                    })
                        .catch((nextErr) => reject(nextErr));
                }
                else {
                    resolve(resources);
                }
            });
        });
    }
    getAllResourcesByType(server, resourceTypes) {
        return new Promise((resolve, reject) => {
            const nextResourceType = resourceTypes.pop();
            const url = server + (server.endsWith('/') ? '' : '/') + nextResourceType;
            console.log(`Getting all resources of type ${nextResourceType}`);
            this.getNextResources(url, nextResourceType)
                .then((resources) => {
                if (resourceTypes.length > 0) {
                    this.getAllResourcesByType(server, resourceTypes)
                        .then((nextResources) => {
                        resources = resources.concat(nextResources);
                        resolve(resources);
                    })
                        .catch((err) => reject(err));
                }
                else {
                    resolve(resources);
                }
            })
                .catch((err) => reject(err));
        });
    }
    getAllResources(server) {
        return new Promise((resolve, reject) => {
            this.getConformance(server)
                .then((conformance) => {
                let promises = [];
                const resourceTypes = [];
                _.each(conformance.rest, (rest) => {
                    _.each(rest.resource, (resource) => resourceTypes.push(resource.type));
                });
                return this.getAllResourcesByType(server, resourceTypes);
            })
                .then((allResources) => allResources)
                .catch((err) => reject(err));
        });
    }
    saveResource(server, resource) {
        return new Promise((resolve, reject) => {
            resolve();
        });
    }
}
exports.BaseTools = BaseTools;
//# sourceMappingURL=data:application/json;base64,