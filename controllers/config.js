"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require("config");
const express = require("express");
const FhirHelper = require("../fhirHelper");
const rp = require("request-promise");
const _ = require("underscore");
const controller_1 = require("./controller");
const fhirConfig = config.get('fhir');
const authConfig = config.get('auth');
const githubConfig = config.get('github');
class ConfigController extends controller_1.BaseController {
    constructor(baseUrl) {
        super();
        this.baseUrl = baseUrl;
    }
    static initRoutes() {
        const router = express.Router();
        router.get('/', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getConfig()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        router.get('/fhir', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getFhirCapabilities()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        return router;
    }
    getConfig() {
        return new Promise((resolve, reject) => {
            const retConfig = {
                fhirServers: _.map(fhirConfig.servers, (server) => ({ id: server.id, name: server.name })),
                auth: {
                    clientId: authConfig.clientId,
                    scope: authConfig.scope,
                    domain: authConfig.domain
                },
                github: {
                    clientId: githubConfig.clientId
                }
            };
            resolve(retConfig);
        });
    }
    getFhirCapabilities() {
        if (ConfigController.serverMetadata[this.baseUrl]) {
            return Promise.resolve(ConfigController.serverMetadata[this.baseUrl]);
        }
        return new Promise((resolve, reject) => {
            const url = FhirHelper.buildUrl(this.baseUrl, 'metadata');
            const options = {
                url: url,
                method: 'GET',
                json: true
            };
            rp(options)
                .then((results) => {
                ConfigController.serverMetadata[this.baseUrl] = results;
                resolve(results);
            })
                .catch((err) => reject(err));
        });
    }
}
/**
 * For caching the metadata about the FHIR servers to respond more quickly
 */
ConfigController.serverMetadata = {};
exports.ConfigController = ConfigController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQUNuQyw0Q0FBNEM7QUFDNUMsc0NBQXNDO0FBQ3RDLGdDQUFnQztBQUVoQyw2Q0FBNEM7QUFFNUMsTUFBTSxVQUFVLEdBQWdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTFDLHNCQUE4QixTQUFRLDJCQUFjO0lBT2hELFlBQVksT0FBZTtRQUN2QixLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVTtRQUNwQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFvQixFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzFDLE1BQU0sVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzVELFVBQVUsQ0FBQyxTQUFTLEVBQUU7aUJBQ2pCLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFvQixFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzlDLE1BQU0sVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzVELFVBQVUsQ0FBQyxtQkFBbUIsRUFBRTtpQkFDM0IsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNwQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU0sU0FBUztRQUNaLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxTQUFTLEdBQUc7Z0JBQ2QsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDMUYsSUFBSSxFQUFFO29CQUNGLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtvQkFDN0IsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO29CQUN2QixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU07aUJBQzVCO2dCQUNELE1BQU0sRUFBRTtvQkFDSixRQUFRLEVBQUUsWUFBWSxDQUFDLFFBQVE7aUJBQ2xDO2FBQ0osQ0FBQztZQUVGLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxtQkFBbUI7UUFDdEIsSUFBSSxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDekU7UUFFRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMxRCxNQUFNLE9BQU8sR0FBRztnQkFDWixHQUFHLEVBQUUsR0FBRztnQkFDUixNQUFNLEVBQUUsS0FBSztnQkFDYixJQUFJLEVBQUUsSUFBSTthQUNiLENBQUM7WUFFRixFQUFFLENBQUMsT0FBTyxDQUFDO2lCQUNOLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNkLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO2dCQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckIsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQXRFRDs7R0FFRztBQUNZLCtCQUFjLEdBQUcsRUFBRSxDQUFDO0FBSnZDLDRDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIEZoaXJIZWxwZXIgZnJvbSAnLi4vZmhpckhlbHBlcic7XG5pbXBvcnQgKiBhcyBycCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCB7RXh0ZW5kZWRSZXF1ZXN0LCBGaGlyQ29uZmlnfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQge0Jhc2VDb250cm9sbGVyfSBmcm9tICcuL2NvbnRyb2xsZXInO1xuXG5jb25zdCBmaGlyQ29uZmlnID0gPEZoaXJDb25maWc+IGNvbmZpZy5nZXQoJ2ZoaXInKTtcbmNvbnN0IGF1dGhDb25maWcgPSBjb25maWcuZ2V0KCdhdXRoJyk7XG5jb25zdCBnaXRodWJDb25maWcgPSBjb25maWcuZ2V0KCdnaXRodWInKTtcblxuZXhwb3J0IGNsYXNzIENvbmZpZ0NvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG4gICAgLyoqXG4gICAgICogRm9yIGNhY2hpbmcgdGhlIG1ldGFkYXRhIGFib3V0IHRoZSBGSElSIHNlcnZlcnMgdG8gcmVzcG9uZCBtb3JlIHF1aWNrbHlcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBzZXJ2ZXJNZXRhZGF0YSA9IHt9O1xuICAgIHByaXZhdGUgYmFzZVVybDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoYmFzZVVybDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGluaXRSb3V0ZXMoKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbiAgICAgICAgcm91dGVyLmdldCgnLycsIChyZXE6IEV4dGVuZGVkUmVxdWVzdCwgcmVzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IENvbmZpZ0NvbnRyb2xsZXIocmVxLmZoaXJTZXJ2ZXJCYXNlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZ2V0Q29uZmlnKClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4gcmVzLnNlbmQocmVzdWx0cykpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IENvbmZpZ0NvbnRyb2xsZXIuaGFuZGxlRXJyb3IoZXJyLCBudWxsLCByZXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcm91dGVyLmdldCgnL2ZoaXInLCAocmVxOiBFeHRlbmRlZFJlcXVlc3QsIHJlcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBDb25maWdDb250cm9sbGVyKHJlcS5maGlyU2VydmVyQmFzZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLmdldEZoaXJDYXBhYmlsaXRpZXMoKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiByZXMuc2VuZChyZXN1bHRzKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gQ29uZmlnQ29udHJvbGxlci5oYW5kbGVFcnJvcihlcnIsIG51bGwsIHJlcykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcm91dGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDb25maWcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZmhpclNlcnZlcnM6IF8ubWFwKGZoaXJDb25maWcuc2VydmVycywgKHNlcnZlcikgPT4gKHsgaWQ6IHNlcnZlci5pZCwgbmFtZTogc2VydmVyLm5hbWUgfSkpLFxuICAgICAgICAgICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6IGF1dGhDb25maWcuY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBhdXRoQ29uZmlnLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBkb21haW46IGF1dGhDb25maWcuZG9tYWluXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnaXRodWI6IHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6IGdpdGh1YkNvbmZpZy5jbGllbnRJZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlc29sdmUocmV0Q29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZoaXJDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGlmIChDb25maWdDb250cm9sbGVyLnNlcnZlck1ldGFkYXRhW3RoaXMuYmFzZVVybF0pIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoQ29uZmlnQ29udHJvbGxlci5zZXJ2ZXJNZXRhZGF0YVt0aGlzLmJhc2VVcmxdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBGaGlySGVscGVyLmJ1aWxkVXJsKHRoaXMuYmFzZVVybCwgJ21ldGFkYXRhJyk7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAganNvbjogdHJ1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcnAob3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBDb25maWdDb250cm9sbGVyLnNlcnZlck1ldGFkYXRhW3RoaXMuYmFzZVVybF0gPSByZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==