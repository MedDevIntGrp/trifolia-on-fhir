"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require("config");
const express = require("express");
const FhirHelper = require("../fhirHelper");
const rp = require("request-promise");
const _ = require("underscore");
const controller_1 = require("./controller");
const fhirConfig = config.get('fhir');
const authConfig = config.get('auth');
const githubConfig = config.get('github');
class ConfigController extends controller_1.BaseController {
    constructor(baseUrl) {
        super();
        this.baseUrl = baseUrl;
    }
    static initRoutes() {
        const router = express.Router();
        router.get('/', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getConfig()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        router.get('/fhir', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getFhirCapabilities()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        return router;
    }
    getConfig() {
        return new Promise((resolve, reject) => {
            const retConfig = {
                fhirServers: _.map(fhirConfig.servers, (server) => ({ id: server.id, name: server.name, short: server.short })),
                auth: {
                    clientId: authConfig.clientId,
                    scope: authConfig.scope,
                    domain: authConfig.domain
                },
                github: {
                    clientId: githubConfig.clientId
                }
            };
            resolve(retConfig);
        });
    }
    getFhirCapabilities() {
        if (ConfigController.serverMetadata[this.baseUrl]) {
            return Promise.resolve(ConfigController.serverMetadata[this.baseUrl]);
        }
        return new Promise((resolve, reject) => {
            const url = FhirHelper.buildUrl(this.baseUrl, 'metadata');
            const options = {
                url: url,
                method: 'GET',
                json: true
            };
            rp(options)
                .then((results) => {
                ConfigController.serverMetadata[this.baseUrl] = results;
                resolve(results);
            })
                .catch((err) => reject(err));
        });
    }
}
/**
 * For caching the metadata about the FHIR servers to respond more quickly
 */
ConfigController.serverMetadata = {};
exports.ConfigController = ConfigController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQUNuQyw0Q0FBNEM7QUFDNUMsc0NBQXNDO0FBQ3RDLGdDQUFnQztBQUVoQyw2Q0FBNEM7QUFHNUMsTUFBTSxVQUFVLEdBQWdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTFDLHNCQUE4QixTQUFRLDJCQUFjO0lBT2hELFlBQVksT0FBZTtRQUN2QixLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVTtRQUNwQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBa0IsR0FBb0IsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMzRCxNQUFNLFVBQVUsR0FBRyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RCxVQUFVLENBQUMsU0FBUyxFQUFFO2lCQUNqQixJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ3BDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQWtCLEdBQW9CLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDL0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDNUQsVUFBVSxDQUFDLG1CQUFtQixFQUFFO2lCQUMzQixJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ3BDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxTQUFTO1FBQ1osT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxNQUFNLFNBQVMsR0FBRztnQkFDZCxXQUFXLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRyxJQUFJLEVBQUU7b0JBQ0YsUUFBUSxFQUFFLFVBQVUsQ0FBQyxRQUFRO29CQUM3QixLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7b0JBQ3ZCLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtpQkFDNUI7Z0JBQ0QsTUFBTSxFQUFFO29CQUNKLFFBQVEsRUFBRSxZQUFZLENBQUMsUUFBUTtpQkFDbEM7YUFDSixDQUFDO1lBRUYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLG1CQUFtQjtRQUN0QixJQUFJLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0MsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUN6RTtRQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzFELE1BQU0sT0FBTyxHQUFHO2dCQUNaLEdBQUcsRUFBRSxHQUFHO2dCQUNSLE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxJQUFJO2FBQ2IsQ0FBQztZQUVGLEVBQUUsQ0FBQyxPQUFPLENBQUM7aUJBQ04sSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2QsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7Z0JBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0FBdEVEOztHQUVHO0FBQ1ksK0JBQWMsR0FBRyxFQUFFLENBQUM7QUFKdkMsNENBd0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJ2NvbmZpZyc7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIEZoaXJIZWxwZXIgZnJvbSAnLi4vZmhpckhlbHBlcic7XHJcbmltcG9ydCAqIGFzIHJwIGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCB7RXh0ZW5kZWRSZXF1ZXN0LCBGaGlyLCBGaGlyQ29uZmlnfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7QmFzZUNvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlcic7XHJcbmltcG9ydCB7UmVxdWVzdEhhbmRsZXJ9IGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuY29uc3QgZmhpckNvbmZpZyA9IDxGaGlyQ29uZmlnPiBjb25maWcuZ2V0KCdmaGlyJyk7XHJcbmNvbnN0IGF1dGhDb25maWcgPSBjb25maWcuZ2V0KCdhdXRoJyk7XHJcbmNvbnN0IGdpdGh1YkNvbmZpZyA9IGNvbmZpZy5nZXQoJ2dpdGh1YicpO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbmZpZ0NvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEZvciBjYWNoaW5nIHRoZSBtZXRhZGF0YSBhYm91dCB0aGUgRkhJUiBzZXJ2ZXJzIHRvIHJlc3BvbmQgbW9yZSBxdWlja2x5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIHNlcnZlck1ldGFkYXRhID0ge307XHJcbiAgICBwcml2YXRlIGJhc2VVcmw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihiYXNlVXJsOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdFJvdXRlcygpIHtcclxuICAgICAgICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5cclxuICAgICAgICByb3V0ZXIuZ2V0KCcvJywgPFJlcXVlc3RIYW5kbGVyPiAocmVxOiBFeHRlbmRlZFJlcXVlc3QsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IENvbmZpZ0NvbnRyb2xsZXIocmVxLmZoaXJTZXJ2ZXJCYXNlKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5nZXRDb25maWcoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHJlcy5zZW5kKHJlc3VsdHMpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IENvbmZpZ0NvbnRyb2xsZXIuaGFuZGxlRXJyb3IoZXJyLCBudWxsLCByZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcm91dGVyLmdldCgnL2ZoaXInLCA8UmVxdWVzdEhhbmRsZXI+IChyZXE6IEV4dGVuZGVkUmVxdWVzdCwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQ29uZmlnQ29udHJvbGxlcihyZXEuZmhpclNlcnZlckJhc2UpO1xyXG4gICAgICAgICAgICBjb250cm9sbGVyLmdldEZoaXJDYXBhYmlsaXRpZXMoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHJlcy5zZW5kKHJlc3VsdHMpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IENvbmZpZ0NvbnRyb2xsZXIuaGFuZGxlRXJyb3IoZXJyLCBudWxsLCByZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJvdXRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIGZoaXJTZXJ2ZXJzOiBfLm1hcChmaGlyQ29uZmlnLnNlcnZlcnMsIChzZXJ2ZXIpID0+ICh7IGlkOiBzZXJ2ZXIuaWQsIG5hbWU6IHNlcnZlci5uYW1lLCBzaG9ydDogc2VydmVyLnNob3J0IH0pKSxcclxuICAgICAgICAgICAgICAgIGF1dGg6IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGllbnRJZDogYXV0aENvbmZpZy5jbGllbnRJZCxcclxuICAgICAgICAgICAgICAgICAgICBzY29wZTogYXV0aENvbmZpZy5zY29wZSxcclxuICAgICAgICAgICAgICAgICAgICBkb21haW46IGF1dGhDb25maWcuZG9tYWluXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2l0aHViOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6IGdpdGh1YkNvbmZpZy5jbGllbnRJZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmVzb2x2ZShyZXRDb25maWcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGaGlyQ2FwYWJpbGl0aWVzKCk6IFByb21pc2U8Rmhpci5DYXBhYmlsaXR5U3RhdGVtZW50PiB7XHJcbiAgICAgICAgaWYgKENvbmZpZ0NvbnRyb2xsZXIuc2VydmVyTWV0YWRhdGFbdGhpcy5iYXNlVXJsXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKENvbmZpZ0NvbnRyb2xsZXIuc2VydmVyTWV0YWRhdGFbdGhpcy5iYXNlVXJsXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBGaGlySGVscGVyLmJ1aWxkVXJsKHRoaXMuYmFzZVVybCwgJ21ldGFkYXRhJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICBqc29uOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBycChvcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBDb25maWdDb250cm9sbGVyLnNlcnZlck1ldGFkYXRhW3RoaXMuYmFzZVVybF0gPSByZXN1bHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==