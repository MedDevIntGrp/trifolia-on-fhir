"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("underscore");
const rp = require("request-promise");
const FhirHelper = require("../fhirHelper");
const log4js = require("log4js");
const config = require("config");
class BundleExporter {
    constructor(fhirServerBase, fhirServerId, fhir, implementationGuideId) {
        this.log = log4js.getLogger();
        this.fhirServerBase = fhirServerBase;
        this.fhirServerId = fhirServerId;
        this.fhir = fhir;
        this.implementationGuideId = implementationGuideId;
        this.fhirConfig = config.get('fhir');
    }
    _getStu3Resources(implementationGuide) {
        const promises = [];
        _.each(implementationGuide.package, (igPackage) => {
            const references = _.chain(igPackage.resource)
                .filter((resource) => !!resource.sourceReference && !!resource.sourceReference.reference)
                .map((resource) => resource.sourceReference.reference)
                .value();
            _.each(references, (reference) => {
                const parsed = FhirHelper.parseUrl(reference);
                const resourceUrl = FhirHelper.buildUrl(this.fhirServerBase, parsed.resourceType, parsed.id);
                const resourcePromise = rp({ url: resourceUrl, json: true, resolveWithFullResponse: true });
                promises.push(resourcePromise);
            });
        });
        return Promise.all(promises);
    }
    _getR4Resources(implementationGuide) {
        if (!implementationGuide.definition) {
            return Promise.resolve([]);
        }
        const promises = _.chain(implementationGuide.definition.resource)
            .filter((resource) => !!resource.reference && !!resource.reference.reference)
            .map((resource) => {
            const reference = resource.reference.reference;
            const parsed = FhirHelper.parseUrl(reference);
            const resourceUrl = FhirHelper.buildUrl(this.fhirServerBase, parsed.resourceType, parsed.id);
            const resourcePromise = rp({ url: resourceUrl, json: true, resolveWithFullResponse: true });
            return resourcePromise;
        })
            .value();
        return Promise.all(promises);
    }
    getBundle() {
        return new Promise((resolve, reject) => {
            const igUrl = FhirHelper.buildUrl(this.fhirServerBase, 'ImplementationGuide', this.implementationGuideId);
            const fhirServerConfig = _.find(this.fhirConfig.servers, (serverConfig) => {
                return serverConfig.id === this.fhirServerId;
            });
            let implementationGuide;
            let implementationGuideFullUrl;
            rp({ url: igUrl, json: true, resolveWithFullResponse: true })
                .then((response) => {
                implementationGuide = response.body;
                implementationGuideFullUrl = response.headers['content-location'];
                if (fhirServerConfig.version === 'stu3') {
                    return this._getStu3Resources(implementationGuide);
                }
                return this._getR4Resources(implementationGuide);
            })
                .then((responses) => {
                const resourceEntries = _.chain(responses)
                    .filter((response) => {
                    return !!response.body && !!response.body.resourceType;
                })
                    .map((response) => {
                    let fullUrl = response.headers['content-location'];
                    if (!fullUrl) {
                        fullUrl = FhirHelper.joinUrl(this.fhirServerBase, response.body.resourceType, response.body.id);
                        if (response.body.meta && response.body.meta.versionId) {
                            fullUrl = FhirHelper.joinUrl(fullUrl, '_history', response.body.meta.versionId);
                        }
                    }
                    return {
                        fullUrl: fullUrl,
                        resource: response.body
                    };
                })
                    .value();
                if (responses.length !== resourceEntries.length) {
                    this.log.error(`Expected ${responses.length} entries in the export bundle, but only returning ${resourceEntries.length}. Some resources could not be returned in the bundle due to the response from the server.`);
                }
                const bundle = {
                    resourceType: 'Bundle',
                    type: 'collection',
                    total: resourceEntries.length + 1,
                    entry: [{ fullUrl: implementationGuideFullUrl, resource: implementationGuide }].concat(resourceEntries)
                };
                resolve(bundle);
            })
                .catch((err) => {
                if (err && err.response && err.response.body) {
                    const errBody = err.response.body;
                    const issueTexts = _.map(errBody.issue, (issue) => issue.diagnostics);
                    if (issueTexts.length > 0) {
                        reject(issueTexts.join(' & '));
                    }
                    else if (errBody.text && errBody.text.div) {
                        reject(errBody.text.div);
                    }
                    else {
                        this.log.error(errBody);
                        reject('Unknown error returned by FHIR server when getting resources for implementation guide');
                    }
                }
                else {
                    this.log.error(err);
                    reject(err);
                }
            });
        });
    }
    export(format = 'json') {
        return new Promise((resolve, reject) => {
            this.getBundle()
                .then((results) => {
                let response = results;
                if (format === 'xml' || format === 'application/xml') {
                    response = this.fhir.objToXml(results);
                }
                resolve(response);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
}
exports.BundleExporter = BundleExporter;
//# sourceMappingURL=data:application/json;base64,