"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = require("./controller");
const authHelper_1 = require("../authHelper");
const express = require("express");
const PhinVadsImporter = require("../import/phinVadsImporter");
const rp = require("request-promise");
const FhirHelper = require("../fhirHelper");
class ImportController extends controller_1.BaseController {
    constructor(baseUrl) {
        super();
        this.vsacBaseUrl = 'https://cts.nlm.nih.gov/fhir/';
        this.baseUrl = baseUrl;
    }
    static initRoutes() {
        const router = express.Router();
        router.get('/phinVads', authHelper_1.checkJwt, (req, res) => {
            const controller = new ImportController(req.fhirServerBase);
            controller.searchPhinVadsValueSet(req.query.searchText)
                .then((results) => res.send(results))
                .catch((err) => this.handleError(err, null, res));
        });
        router.post('/phinVads', authHelper_1.checkJwt, (req, res) => {
            const controller = new ImportController(req.fhirServerBase);
            controller.importPhinVadsValueSet(req.params.id)
                .then((results) => res.send(results))
                .catch((err) => this.handleError(err, null, res));
        });
        router.get('/vsac/:resourceType/:id', authHelper_1.checkJwt, (req, res) => {
            const controller = new ImportController(req.fhirServerBase);
            controller.importVsacValueSet(req.headers.vsacauthorization, req.params.resourceType, req.params.id)
                .then((results) => res.send(results))
                .catch((err) => this.handleError(err, null, res));
        });
        router.post('/', authHelper_1.checkJwt, (req, res) => {
            const controller = new ImportController(req.fhirServerBase);
            controller.importResource(req.body)
                .then((results) => res.send(results))
                .catch((err) => this.handleError(err, null, res));
        });
        return router;
    }
    searchPhinVadsValueSet(searchText) {
        const importer = new PhinVadsImporter();
        return importer.search(searchText);
    }
    importPhinVadsValueSet(id) {
        const importer = new PhinVadsImporter();
        return importer.import(id);
    }
    importVsacValueSet(vsacAuthorization, resourceType, id) {
        const options = {
            method: 'GET',
            url: `${this.vsacBaseUrl}${resourceType}/${id}`,
            headers: {
                'Authorization': vsacAuthorization,
                'Accept': 'application/json'
            },
            json: true,
            resolveWithFullResponse: true
        };
        return new Promise((resolve, reject) => {
            rp(options)
                .then((results) => {
                if (results.statusCode !== 200) {
                    return reject(results.body);
                }
                return this.importResource(results.body);
            })
                .then((results) => resolve(results))
                .catch((err) => reject(err));
        });
    }
    importResource(resource) {
        const resourceType = resource.resourceType;
        const bundle = resource;
        let options;
        if (resource.resourceType === 'Bundle' && bundle.type === 'transaction') {
            options = {
                method: 'POST',
                url: this.baseUrl + (this.baseUrl.endsWith('/') ? '' : '/'),
                body: resource,
                json: true
            };
        }
        else {
            options = {
                method: resource.id ? 'PUT' : 'POST',
                url: FhirHelper.buildUrl(this.baseUrl, resourceType, resource.id),
                body: resource,
                json: true
            };
        }
        return rp(options);
    }
}
exports.ImportController = ImportController;
//# sourceMappingURL=data:application/json;base64,