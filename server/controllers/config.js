"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require("config");
const express = require("express");
const FhirHelper = require("../fhirHelper");
const rp = require("request-promise");
const _ = require("underscore");
const controller_1 = require("./controller");
const modulePackage = require("../../package.json");
const serverConfig = config.get('server');
const fhirConfig = config.get('fhir');
const authConfig = config.get('auth');
const githubConfig = config.get('github');
class ConfigController extends controller_1.BaseController {
    constructor(baseUrl) {
        super();
        this.baseUrl = baseUrl;
    }
    static initRoutes() {
        const router = express.Router();
        router.get('/', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getConfig()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        router.get('/fhir', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getFhirCapabilities()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        return router;
    }
    getConfig() {
        return new Promise((resolve, reject) => {
            const retConfig = {
                version: modulePackage.version,
                supportUrl: serverConfig.supportUrl,
                fhirServers: _.map(fhirConfig.servers, (server) => ({ id: server.id, name: server.name, short: server.short })),
                auth: {
                    clientId: authConfig.clientId,
                    scope: authConfig.scope,
                    domain: authConfig.domain
                },
                github: {
                    clientId: githubConfig.clientId
                },
                nonEditableResources: fhirConfig.nonEditableResources
            };
            resolve(retConfig);
        });
    }
    getFhirCapabilities() {
        if (ConfigController.serverMetadata[this.baseUrl]) {
            return Promise.resolve(ConfigController.serverMetadata[this.baseUrl]);
        }
        return new Promise((resolve, reject) => {
            const url = FhirHelper.buildUrl(this.baseUrl, 'metadata');
            const options = {
                url: url,
                method: 'GET',
                json: true
            };
            rp(options)
                .then((results) => {
                ConfigController.serverMetadata[this.baseUrl] = results;
                resolve(results);
            })
                .catch((err) => reject(err));
        });
    }
}
/**
 * For caching the metadata about the FHIR servers to respond more quickly
 */
ConfigController.serverMetadata = {};
exports.ConfigController = ConfigController;
//# sourceMappingURL=data:application/json;base64,