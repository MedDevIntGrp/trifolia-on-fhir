"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require("config");
const express = require("express");
const FhirHelper = require("../fhirHelper");
const rp = require("request-promise");
const _ = require("underscore");
const controller_1 = require("./controller");
const serverConfig = config.get('server');
const fhirConfig = config.get('fhir');
const authConfig = config.get('auth');
const githubConfig = config.get('github');
class ConfigController extends controller_1.BaseController {
    constructor(baseUrl) {
        super();
        this.baseUrl = baseUrl;
    }
    static initRoutes() {
        const router = express.Router();
        router.get('/', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getConfig()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        router.get('/fhir', (req, res) => {
            const controller = new ConfigController(req.fhirServerBase);
            controller.getFhirCapabilities()
                .then((results) => res.send(results))
                .catch((err) => ConfigController.handleError(err, null, res));
        });
        return router;
    }
    getConfig() {
        return new Promise((resolve, reject) => {
            const retConfig = {
                supportUrl: serverConfig.supportUrl,
                fhirServers: _.map(fhirConfig.servers, (server) => ({ id: server.id, name: server.name, short: server.short })),
                auth: {
                    clientId: authConfig.clientId,
                    scope: authConfig.scope,
                    domain: authConfig.domain
                },
                github: {
                    clientId: githubConfig.clientId
                }
            };
            resolve(retConfig);
        });
    }
    getFhirCapabilities() {
        if (ConfigController.serverMetadata[this.baseUrl]) {
            return Promise.resolve(ConfigController.serverMetadata[this.baseUrl]);
        }
        return new Promise((resolve, reject) => {
            const url = FhirHelper.buildUrl(this.baseUrl, 'metadata');
            const options = {
                url: url,
                method: 'GET',
                json: true
            };
            rp(options)
                .then((results) => {
                ConfigController.serverMetadata[this.baseUrl] = results;
                resolve(results);
            })
                .catch((err) => reject(err));
        });
    }
}
/**
 * For caching the metadata about the FHIR servers to respond more quickly
 */
ConfigController.serverMetadata = {};
exports.ConfigController = ConfigController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQUNuQyw0Q0FBNEM7QUFDNUMsc0NBQXNDO0FBQ3RDLGdDQUFnQztBQUVoQyw2Q0FBNEM7QUFHNUMsTUFBTSxZQUFZLEdBQWtCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDekQsTUFBTSxVQUFVLEdBQWdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTFDLE1BQWEsZ0JBQWlCLFNBQVEsMkJBQWM7SUFPaEQsWUFBWSxPQUFlO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDM0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVoQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFrQixHQUFvQixFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzNELE1BQU0sVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzVELFVBQVUsQ0FBQyxTQUFTLEVBQUU7aUJBQ2pCLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBa0IsR0FBb0IsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMvRCxNQUFNLFVBQVUsR0FBRyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RCxVQUFVLENBQUMsbUJBQW1CLEVBQUU7aUJBQzNCLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLFNBQVM7UUFDWixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLE1BQU0sU0FBUyxHQUFHO2dCQUNkLFVBQVUsRUFBRSxZQUFZLENBQUMsVUFBVTtnQkFDbkMsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDL0csSUFBSSxFQUFFO29CQUNGLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtvQkFDN0IsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO29CQUN2QixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU07aUJBQzVCO2dCQUNELE1BQU0sRUFBRTtvQkFDSixRQUFRLEVBQUUsWUFBWSxDQUFDLFFBQVE7aUJBQ2xDO2FBQ0osQ0FBQztZQUVGLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxtQkFBbUI7UUFDdEIsSUFBSSxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDekU7UUFFRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMxRCxNQUFNLE9BQU8sR0FBRztnQkFDWixHQUFHLEVBQUUsR0FBRztnQkFDUixNQUFNLEVBQUUsS0FBSztnQkFDYixJQUFJLEVBQUUsSUFBSTthQUNiLENBQUM7WUFFRixFQUFFLENBQUMsT0FBTyxDQUFDO2lCQUNOLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNkLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO2dCQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckIsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQXZFRDs7R0FFRztBQUNZLCtCQUFjLEdBQUcsRUFBRSxDQUFDO0FBSnZDLDRDQXlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICdjb25maWcnO1xyXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBGaGlySGVscGVyIGZyb20gJy4uL2ZoaXJIZWxwZXInO1xyXG5pbXBvcnQgKiBhcyBycCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQge0V4dGVuZGVkUmVxdWVzdCwgRmhpciwgRmhpckNvbmZpZywgU2VydmVyQ29uZmlnfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7QmFzZUNvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlcic7XHJcbmltcG9ydCB7UmVxdWVzdEhhbmRsZXJ9IGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuY29uc3Qgc2VydmVyQ29uZmlnID0gPFNlcnZlckNvbmZpZz4gY29uZmlnLmdldCgnc2VydmVyJyk7XHJcbmNvbnN0IGZoaXJDb25maWcgPSA8RmhpckNvbmZpZz4gY29uZmlnLmdldCgnZmhpcicpO1xyXG5jb25zdCBhdXRoQ29uZmlnID0gY29uZmlnLmdldCgnYXV0aCcpO1xyXG5jb25zdCBnaXRodWJDb25maWcgPSBjb25maWcuZ2V0KCdnaXRodWInKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25maWdDb250cm9sbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3IgY2FjaGluZyB0aGUgbWV0YWRhdGEgYWJvdXQgdGhlIEZISVIgc2VydmVycyB0byByZXNwb25kIG1vcmUgcXVpY2tseVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBzZXJ2ZXJNZXRhZGF0YSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBiYXNlVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYmFzZVVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXRSb3V0ZXMoKSB7XHJcbiAgICAgICAgY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbiAgICAgICAgcm91dGVyLmdldCgnLycsIDxSZXF1ZXN0SGFuZGxlcj4gKHJlcTogRXh0ZW5kZWRSZXF1ZXN0LCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBDb25maWdDb250cm9sbGVyKHJlcS5maGlyU2VydmVyQmFzZSk7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZ2V0Q29uZmlnKClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiByZXMuc2VuZChyZXN1bHRzKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBDb25maWdDb250cm9sbGVyLmhhbmRsZUVycm9yKGVyciwgbnVsbCwgcmVzKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJvdXRlci5nZXQoJy9maGlyJywgPFJlcXVlc3RIYW5kbGVyPiAocmVxOiBFeHRlbmRlZFJlcXVlc3QsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IENvbmZpZ0NvbnRyb2xsZXIocmVxLmZoaXJTZXJ2ZXJCYXNlKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5nZXRGaGlyQ2FwYWJpbGl0aWVzKClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiByZXMuc2VuZChyZXN1bHRzKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBDb25maWdDb250cm9sbGVyLmhhbmRsZUVycm9yKGVyciwgbnVsbCwgcmVzKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3V0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvbmZpZygpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBzdXBwb3J0VXJsOiBzZXJ2ZXJDb25maWcuc3VwcG9ydFVybCxcclxuICAgICAgICAgICAgICAgIGZoaXJTZXJ2ZXJzOiBfLm1hcChmaGlyQ29uZmlnLnNlcnZlcnMsIChzZXJ2ZXIpID0+ICh7IGlkOiBzZXJ2ZXIuaWQsIG5hbWU6IHNlcnZlci5uYW1lLCBzaG9ydDogc2VydmVyLnNob3J0IH0pKSxcclxuICAgICAgICAgICAgICAgIGF1dGg6IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGllbnRJZDogYXV0aENvbmZpZy5jbGllbnRJZCxcclxuICAgICAgICAgICAgICAgICAgICBzY29wZTogYXV0aENvbmZpZy5zY29wZSxcclxuICAgICAgICAgICAgICAgICAgICBkb21haW46IGF1dGhDb25maWcuZG9tYWluXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2l0aHViOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6IGdpdGh1YkNvbmZpZy5jbGllbnRJZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmVzb2x2ZShyZXRDb25maWcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGaGlyQ2FwYWJpbGl0aWVzKCk6IFByb21pc2U8Rmhpci5DYXBhYmlsaXR5U3RhdGVtZW50PiB7XHJcbiAgICAgICAgaWYgKENvbmZpZ0NvbnRyb2xsZXIuc2VydmVyTWV0YWRhdGFbdGhpcy5iYXNlVXJsXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKENvbmZpZ0NvbnRyb2xsZXIuc2VydmVyTWV0YWRhdGFbdGhpcy5iYXNlVXJsXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBGaGlySGVscGVyLmJ1aWxkVXJsKHRoaXMuYmFzZVVybCwgJ21ldGFkYXRhJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICBqc29uOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBycChvcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBDb25maWdDb250cm9sbGVyLnNlcnZlck1ldGFkYXRhW3RoaXMuYmFzZVVybF0gPSByZXN1bHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==