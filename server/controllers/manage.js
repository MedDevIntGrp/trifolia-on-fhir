"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const AuthHelper = require("../authHelper");
const _ = require("underscore");
const config = require("config");
const serverConfig = config.get('server');
class ManageController {
    constructor(io, ioConnections) {
        this.io = io;
        this.ioConnections = ioConnections;
    }
    static initRoutes() {
        const router = express.Router();
        router.post('/user/active/message', AuthHelper.checkJwt, (req, res) => {
            if (req.headers['admin-code'] !== serverConfig.adminCode) {
                return res.status(401).send('You have not authenticated request as an admin');
            }
            const controller = new ManageController(req.io, req.ioConnections);
            controller.sendMessageToActiveUsers(req.body.message)
                .then((results) => res.send(results))
                .catch((err) => res.status(500).send(err));
        });
        router.get('/user/active', AuthHelper.checkJwt, (req, res) => {
            if (req.headers['admin-code'] !== serverConfig.adminCode) {
                return res.status(401).send('You have not authenticated request as an admin');
            }
            const controller = new ManageController(req.io, req.ioConnections);
            controller.getActiveUsers()
                .then((results) => res.send(results))
                .catch((err) => res.status(500).send(err));
        });
        return router;
    }
    getActiveUsers() {
        return new Promise((resolve) => {
            const connections = _.map(this.ioConnections, (connection) => {
                let name;
                if (connection.practitioner && connection.practitioner.name && connection.practitioner.name.length > 0) {
                    name = connection.practitioner.name[0].family;
                    if (connection.practitioner.name[0].given && connection.practitioner.name[0].given.length > 0) {
                        if (name) {
                            name += ', ';
                        }
                        name += connection.practitioner.name[0].given.join(' ');
                    }
                }
                return {
                    socketId: connection.id,
                    userId: connection.userProfile ? connection.userProfile.user_id : null,
                    email: connection.userProfile ? connection.userProfile.email : null,
                    practitionerReference: connection.practitioner ? `Practitioner/${connection.practitioner.id}` : null,
                    name: name
                };
            });
            resolve(connections);
        });
    }
    sendMessageToActiveUsers(message) {
        return new Promise((resolve) => {
            this.io.emit('message', message);
            resolve();
        });
    }
}
exports.ManageController = ManageController;
//# sourceMappingURL=data:application/json;base64,