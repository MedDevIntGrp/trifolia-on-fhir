"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const fhirLogic_1 = require("./fhirLogic");
const rp = require("request-promise");
const config = require("config");
const log4js = require("log4js");
const _ = require("underscore");
const authHelper_1 = require("../authHelper");
const fhirConfig = config.get('fhir');
const log = log4js.getLogger();
class ImplementationGuideLogic extends fhirLogic_1.FhirLogic {
    static initRoutes() {
        const router = express.Router();
        router.get('/published', authHelper_1.checkJwt, (req, res) => {
            log.trace(`Getting list of published implementation guides`);
            const fhirLogic = new ImplementationGuideLogic('ImplementationGuide', req.fhirServerBase);
            fhirLogic.getPublishedGuides()
                .then((results) => res.send(results))
                .catch((err) => this.handleError(err, null, res));
        });
        return super.initRoutes('ImplementationGuide', router);
    }
    getPublishedGuides() {
        return new Promise((resolve, reject) => {
            if (!fhirConfig.publishedGuides) {
                throw new Error('Server is not configured with a publishedGuides property');
            }
            rp(fhirConfig.publishedGuides, { json: true })
                .then((results) => {
                const guides = [];
                _.each(results.guides, (guide) => {
                    _.each(guide.editions, (edition) => {
                        guides.push({
                            name: guide.name,
                            url: edition.url,
                            version: edition['ig-version'],
                            'npm-name': guide['npm-name']
                        });
                    });
                });
                resolve(guides);
            })
                .catch((err) => reject(err));
        });
    }
    search(query) {
        return super.search(query);
    }
}
ImplementationGuideLogic.resourceType = 'ImplementationGuide';
exports.ImplementationGuideLogic = ImplementationGuideLogic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGVtZW50YXRpb25HdWlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uR3VpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFDbkMsMkNBQXNDO0FBQ3RDLHNDQUFzQztBQUN0QyxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGdDQUFnQztBQUNoQyw4Q0FBdUM7QUFJdkMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFhL0IsTUFBYSx3QkFBeUIsU0FBUSxxQkFBUztJQUc1QyxNQUFNLENBQUMsVUFBVTtRQUNwQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQW1CLHFCQUFRLEVBQUUsQ0FBQyxHQUFvQixFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzlFLEdBQUcsQ0FBQyxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztZQUU3RCxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUF3QixDQUFDLHFCQUFxQixFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUMxRixTQUFTLENBQUMsa0JBQWtCLEVBQUU7aUJBQ3pCLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU0sa0JBQWtCO1FBQ3JCLE9BQU8sSUFBSSxPQUFPLENBQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQzthQUMvRTtZQUVELEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUN6QyxJQUFJLENBQUMsQ0FBQyxPQUE2QixFQUFFLEVBQUU7Z0JBQ3BDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFFbEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQzdCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO3dCQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDOzRCQUNSLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTs0QkFDaEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHOzRCQUNoQixPQUFPLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQzs0QkFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUM7eUJBQ2hDLENBQUMsQ0FBQztvQkFDUCxDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDLENBQUMsQ0FBQztnQkFFSCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVc7UUFDckIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7O0FBOUNNLHFDQUFZLEdBQUcscUJBQXFCLENBQUM7QUFEaEQsNERBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7RmhpckxvZ2ljfSBmcm9tICcuL2ZoaXJMb2dpYyc7XG5pbXBvcnQgKiBhcyBycCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBsb2c0anMgZnJvbSAnbG9nNGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQge2NoZWNrSnd0fSBmcm9tICcuLi9hdXRoSGVscGVyJztcbmltcG9ydCB7RXh0ZW5kZWRSZXF1ZXN0fSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQge1JlcXVlc3RIYW5kbGVyfSBmcm9tICdleHByZXNzJztcblxuY29uc3QgZmhpckNvbmZpZyA9IGNvbmZpZy5nZXQoJ2ZoaXInKTtcbmNvbnN0IGxvZyA9IGxvZzRqcy5nZXRMb2dnZXIoKTtcblxuaW50ZXJmYWNlIFB1Ymxpc2hlZEd1aWRlc01vZGVsIHtcbiAgICBndWlkZXM6IFt7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgJ25wbS1uYW1lJzogc3RyaW5nO1xuICAgICAgICBlZGl0aW9uczogW3tcbiAgICAgICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICAgICAgdmVyc2lvbjogc3RyaW5nO1xuICAgICAgICB9XVxuICAgIH1dO1xufVxuXG5leHBvcnQgY2xhc3MgSW1wbGVtZW50YXRpb25HdWlkZUxvZ2ljIGV4dGVuZHMgRmhpckxvZ2ljIHtcbiAgICBzdGF0aWMgcmVzb3VyY2VUeXBlID0gJ0ltcGxlbWVudGF0aW9uR3VpZGUnO1xuXG4gICAgcHVibGljIHN0YXRpYyBpbml0Um91dGVzKCkge1xuICAgICAgICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4gICAgICAgIHJvdXRlci5nZXQoJy9wdWJsaXNoZWQnLCA8UmVxdWVzdEhhbmRsZXI+IGNoZWNrSnd0LCAocmVxOiBFeHRlbmRlZFJlcXVlc3QsIHJlcykgPT4ge1xuICAgICAgICAgICAgbG9nLnRyYWNlKGBHZXR0aW5nIGxpc3Qgb2YgcHVibGlzaGVkIGltcGxlbWVudGF0aW9uIGd1aWRlc2ApO1xuXG4gICAgICAgICAgICBjb25zdCBmaGlyTG9naWMgPSBuZXcgSW1wbGVtZW50YXRpb25HdWlkZUxvZ2ljKCdJbXBsZW1lbnRhdGlvbkd1aWRlJywgcmVxLmZoaXJTZXJ2ZXJCYXNlKTtcbiAgICAgICAgICAgIGZoaXJMb2dpYy5nZXRQdWJsaXNoZWRHdWlkZXMoKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiByZXMuc2VuZChyZXN1bHRzKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIsIG51bGwsIHJlcykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc3VwZXIuaW5pdFJvdXRlcygnSW1wbGVtZW50YXRpb25HdWlkZScsIHJvdXRlcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFB1Ymxpc2hlZEd1aWRlcygpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWZoaXJDb25maWcucHVibGlzaGVkR3VpZGVzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXIgaXMgbm90IGNvbmZpZ3VyZWQgd2l0aCBhIHB1Ymxpc2hlZEd1aWRlcyBwcm9wZXJ0eScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBycChmaGlyQ29uZmlnLnB1Ymxpc2hlZEd1aWRlcywgeyBqc29uOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHM6IFB1Ymxpc2hlZEd1aWRlc01vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGd1aWRlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaChyZXN1bHRzLmd1aWRlcywgKGd1aWRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmVhY2goZ3VpZGUuZWRpdGlvbnMsIChlZGl0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VpZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBndWlkZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGVkaXRpb24udXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBlZGl0aW9uWydpZy12ZXJzaW9uJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICducG0tbmFtZSc6IGd1aWRlWyducG0tbmFtZSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShndWlkZXMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlYXJjaChxdWVyeT86IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5zZWFyY2gocXVlcnkpO1xuICAgIH1cbn1cbiJdfQ==