"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const rp = require("request-promise");
const FhirHelper = require("../fhirHelper");
const config = require("config");
const fhirLogic_1 = require("./fhirLogic");
const fhirConfig = config.get('fhir');
class ValueSetController extends fhirLogic_1.FhirLogic {
    static initRoutes() {
        const router = express.Router();
        router.post('/:id/expand', (req, res) => {
            const controller = new ValueSetController('ValueSet', req.fhirServerBase);
            controller.getExpanded(req.params.id, req.body)
                .then((results) => res.send(results))
                .catch((err) => ValueSetController.handleError(err, null, res));
        });
        return super.initRoutes('ValueSet', router);
    }
    getExpanded(id, options) {
        return new Promise((resolve, reject) => {
            ValueSetController.log.trace(`Beginning request to expand value set ${id}`);
            const getOptions = {
                url: FhirHelper.buildUrl(this.baseUrl, 'ValueSet', id),
                method: 'GET',
                json: true
            };
            ValueSetController.log.debug(`Expand operation is requesting value set content for ${id}`);
            rp(getOptions)
                .then((valueSet) => {
                ValueSetController.log.trace('Retrieved value set content for expand');
                const expandOptions = {
                    url: FhirHelper.buildUrl(fhirConfig.terminologyServer || this.baseUrl, 'ValueSet', null, '$expand', options),
                    method: 'POST',
                    json: true,
                    body: valueSet
                };
                ValueSetController.log.debug(`Asking the FHIR server to expand value set ${id}`);
                return rp(expandOptions);
            })
                .then((expandedValueSet) => {
                ValueSetController.log.trace('FHIR server responded with expanded value set');
                resolve(expandedValueSet);
            })
                .catch((err) => reject(err));
        });
    }
}
exports.ValueSetController = ValueSetController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWVTZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2YWx1ZVNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxzQ0FBc0M7QUFDdEMsNENBQTRDO0FBQzVDLGlDQUFpQztBQUNqQywyQ0FBc0M7QUFJdEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQVN0QyxNQUFhLGtCQUFtQixTQUFRLHFCQUFTO0lBQ3RDLE1BQU0sQ0FBQyxVQUFVO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVoQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQWtCLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkQsTUFBTSxVQUFVLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQztpQkFDMUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNwQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxXQUFXLENBQUMsRUFBVSxFQUFFLE9BQXVCO1FBQ2xELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUU1RSxNQUFNLFVBQVUsR0FBRztnQkFDZixHQUFHLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUM7Z0JBQ3RELE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxJQUFJO2FBQ2IsQ0FBQztZQUVGLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsd0RBQXdELEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFM0YsRUFBRSxDQUFDLFVBQVUsQ0FBQztpQkFDVCxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDZixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Z0JBRXZFLE1BQU0sYUFBYSxHQUFHO29CQUNsQixHQUFHLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUM7b0JBQzVHLE1BQU0sRUFBRSxNQUFNO29CQUNkLElBQUksRUFBRSxJQUFJO29CQUNWLElBQUksRUFBRSxRQUFRO2lCQUNqQixDQUFDO2dCQUVGLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsOENBQThDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ2pGLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQztpQkFDRCxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO2dCQUN2QixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7Z0JBRTlFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBaERELGdEQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIHJwIGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XHJcbmltcG9ydCAqIGFzIEZoaXJIZWxwZXIgZnJvbSAnLi4vZmhpckhlbHBlcic7XHJcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICdjb25maWcnO1xyXG5pbXBvcnQge0ZoaXJMb2dpY30gZnJvbSAnLi9maGlyTG9naWMnO1xyXG5pbXBvcnQge0V4dGVuZGVkUmVxdWVzdH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQge0V4cGFuZE9wdGlvbnN9IGZyb20gJy4uLy4uL3NyYy9hcHAvbW9kZWxzL3N0dTMvZXhwYW5kT3B0aW9ucyc7XHJcblxyXG5jb25zdCBmaGlyQ29uZmlnID0gY29uZmlnLmdldCgnZmhpcicpO1xyXG5cclxuaW50ZXJmYWNlIEV4cGFuZFJlcXVlc3QgZXh0ZW5kcyBFeHRlbmRlZFJlcXVlc3Qge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgaWQ6IHN0cmluZztcclxuICAgIH07XHJcbiAgICBib2R5OiBFeHBhbmRPcHRpb25zO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmFsdWVTZXRDb250cm9sbGVyIGV4dGVuZHMgRmhpckxvZ2ljIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdFJvdXRlcygpIHtcclxuICAgICAgICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5cclxuICAgICAgICByb3V0ZXIucG9zdCgnLzppZC9leHBhbmQnLCAocmVxOiBFeHBhbmRSZXF1ZXN0LCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBWYWx1ZVNldENvbnRyb2xsZXIoJ1ZhbHVlU2V0JywgcmVxLmZoaXJTZXJ2ZXJCYXNlKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5nZXRFeHBhbmRlZChyZXEucGFyYW1zLmlkLCByZXEuYm9keSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiByZXMuc2VuZChyZXN1bHRzKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBWYWx1ZVNldENvbnRyb2xsZXIuaGFuZGxlRXJyb3IoZXJyLCBudWxsLCByZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmluaXRSb3V0ZXMoJ1ZhbHVlU2V0Jywgcm91dGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RXhwYW5kZWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IEV4cGFuZE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBWYWx1ZVNldENvbnRyb2xsZXIubG9nLnRyYWNlKGBCZWdpbm5pbmcgcmVxdWVzdCB0byBleHBhbmQgdmFsdWUgc2V0ICR7aWR9YCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnZXRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgdXJsOiBGaGlySGVscGVyLmJ1aWxkVXJsKHRoaXMuYmFzZVVybCwgJ1ZhbHVlU2V0JywgaWQpLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIGpzb246IHRydWVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIFZhbHVlU2V0Q29udHJvbGxlci5sb2cuZGVidWcoYEV4cGFuZCBvcGVyYXRpb24gaXMgcmVxdWVzdGluZyB2YWx1ZSBzZXQgY29udGVudCBmb3IgJHtpZH1gKTtcclxuXHJcbiAgICAgICAgICAgIHJwKGdldE9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAudGhlbigodmFsdWVTZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBWYWx1ZVNldENvbnRyb2xsZXIubG9nLnRyYWNlKCdSZXRyaWV2ZWQgdmFsdWUgc2V0IGNvbnRlbnQgZm9yIGV4cGFuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IEZoaXJIZWxwZXIuYnVpbGRVcmwoZmhpckNvbmZpZy50ZXJtaW5vbG9neVNlcnZlciB8fCB0aGlzLmJhc2VVcmwsICdWYWx1ZVNldCcsIG51bGwsICckZXhwYW5kJywgb3B0aW9ucyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB2YWx1ZVNldFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFZhbHVlU2V0Q29udHJvbGxlci5sb2cuZGVidWcoYEFza2luZyB0aGUgRkhJUiBzZXJ2ZXIgdG8gZXhwYW5kIHZhbHVlIHNldCAke2lkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBycChleHBhbmRPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoZXhwYW5kZWRWYWx1ZVNldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFZhbHVlU2V0Q29udHJvbGxlci5sb2cudHJhY2UoJ0ZISVIgc2VydmVyIHJlc3BvbmRlZCB3aXRoIGV4cGFuZGVkIHZhbHVlIHNldCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGV4cGFuZGVkVmFsdWVTZXQpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=