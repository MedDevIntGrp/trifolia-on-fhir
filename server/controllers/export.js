"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const tmp = require("tmp");
const path = require("path");
const rp = require("request-promise");
const _ = require("underscore");
const html_1 = require("../export/html");
const controller_1 = require("./controller");
const bundle_1 = require("../export/bundle");
const promiseHelper_1 = require("../promiseHelper");
const authHelper_1 = require("../authHelper");
const FhirHelper = require("../fhirHelper");
var ExportFormats;
(function (ExportFormats) {
    ExportFormats["Bundle"] = "1";
    ExportFormats["Html"] = "2";
})(ExportFormats || (ExportFormats = {}));
class ExportOptions {
    constructor(query) {
        this.executeIgPublisher = true;
        this.useTerminologyServer = false;
        this.useLatest = false;
        this.downloadOutput = true;
        this.format = 'json';
        this.exportFormat = ExportFormats.Bundle;
        this.includeIgPublisherJar = false;
        if (query) {
            if (query.socketId) {
                this.socketId = query.socketId;
            }
            if (query.hasOwnProperty('executeIgPublisher')) {
                this.executeIgPublisher = query.executeIgPublisher.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useTerminologyServer')) {
                this.useTerminologyServer = query.useTerminologyServer.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useLatest')) {
                this.useLatest = query.useLatest.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('downloadOutput')) {
                this.downloadOutput = query.downloadOutput.toLowerCase === 'true';
            }
            if (query.hasOwnProperty('_format')) {
                this.format = query._format;
            }
            if (query.hasOwnProperty('exportFormat')) {
                this.exportFormat = query.exportFormat;
            }
            if (query.hasOwnProperty('includeIgPublisherJar')) {
                this.includeIgPublisherJar = query.includeIgPublisherJar.toLowerCase() === 'true';
            }
        }
    }
}
class ExportController extends controller_1.BaseController {
    constructor(baseUrl, fhirServerId, fhirVersion, fhir, io) {
        super();
        this.baseUrl = baseUrl;
        this.fhirServerId = fhirServerId;
        this.fhirVersion = fhirVersion;
        this.fhir = fhir;
        this.io = io;
    }
    static initRoutes() {
        const router = express.Router();
        router.post('/:implementationGuideId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhirServerVersion, req.fhir, req.io);
            controller.exportImplementationGuide(req.params.implementationGuideId, new ExportOptions(req.query))
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        router.get('/:packageId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhirServerVersion, req.fhir, req.io);
            controller.getExportedPackage(req.params.packageId)
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        router.get('/:implementationGuideId/([$])validate', authHelper_1.checkJwt, (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhirServerVersion, req.fhir, req.io);
            controller.validate(req.params.implementationGuideId)
                .then((results) => res.send(results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        return router;
    }
    validate(implementationGuideId) {
        return new Promise((resolve, reject) => {
            const bundleExporter = new bundle_1.BundleExporter(this.baseUrl, this.fhirServerId, this.fhirVersion, this.fhir, implementationGuideId);
            let validationRequests = [];
            bundleExporter.getBundle(true)
                .then((results) => {
                validationRequests = _.map(results.entry, (entry) => {
                    const options = {
                        url: FhirHelper.buildUrl(this.baseUrl, entry.resource.resourceType, null, '$validate'),
                        method: 'POST',
                        body: entry.resource,
                        json: true,
                        simple: false,
                        resolveWithFullResponse: true
                    };
                    return {
                        resourceReference: `${entry.resource.resourceType}/${entry.resource.id}`,
                        promise: rp(options)
                    };
                });
                const promises = _.map(validationRequests, (validationRequest) => validationRequest.promise);
                return Promise.all(promises);
            })
                .then((resultSets) => {
                let validationResults = [];
                _.each(resultSets, (resultSet, index) => {
                    if (resultSet.body && resultSet.body.resourceType === 'OperationOutcome') {
                        const oo = resultSet.body;
                        const next = _.map(oo.issue, (issue) => {
                            return {
                                resourceReference: validationRequests[index].resourceReference,
                                severity: issue.severity,
                                details: issue.diagnostics
                            };
                        });
                        validationResults = validationResults.concat(next);
                    }
                });
                validationResults = _.sortBy(validationResults, (validationResult) => validationResult.severity);
                resolve(validationResults);
            })
                .catch((err) => {
                if (err.statusCode === 412) {
                    resolve(err.error);
                }
                else {
                    reject(err);
                }
            });
        });
    }
    exportBundle(implementationGuideId, format = 'json') {
        return new Promise((resolve, reject) => {
            const exporter = new bundle_1.BundleExporter(this.baseUrl, this.fhirServerId, this.fhirVersion, this.fhir, implementationGuideId);
            exporter.export(format)
                .then((response) => {
                let fileExt = '.json';
                if (format && format === 'application/xml') {
                    fileExt = '.xml';
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-bundle' + fileExt,
                    content: response
                });
            })
                .catch((err) => reject(err));
        });
    }
    exportHtml(implementationGuideId, options) {
        return new Promise((resolve, reject) => {
            const exporter = new html_1.HtmlExporter(this.baseUrl, this.fhirServerId, this.fhirVersion, this.fhir, this.io, options.socketId, implementationGuideId);
            ExportController.htmlExports.push(exporter);
            exporter.export(options.format, options.executeIgPublisher, options.useTerminologyServer, options.useLatest, options.downloadOutput, options.includeIgPublisherJar)
                .then((response) => {
                resolve({
                    content: response
                });
                // Should be moved to a .finally() block when moving to ES2018
                const index = ExportController.htmlExports.indexOf(exporter);
                ExportController.htmlExports.splice(index);
            })
                .catch((err) => {
                reject(err);
                // Should be moved to a .finally() block when moving to ES2018
                const index = ExportController.htmlExports.indexOf(exporter);
                ExportController.htmlExports.splice(index);
            });
        });
    }
    exportImplementationGuide(implementationGuideId, options) {
        switch (options.exportFormat) {
            case ExportFormats.Bundle:
                return this.exportBundle(implementationGuideId, options.format);
                break;
            case ExportFormats.Html:
                return this.exportHtml(implementationGuideId, options);
                break;
            default:
                return Promise.reject('Unexpected export format selected: ' + options.exportFormat);
        }
    }
    getExportedPackage(packageId) {
        return new Promise((resolve, reject) => {
            const rootPath = path.join(tmp.tmpdir, packageId);
            promiseHelper_1.zip(rootPath)
                .then((buffer) => {
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-package.zip',
                    content: buffer
                });
                return promiseHelper_1.emptydir(rootPath);
            })
                .then(() => {
                return promiseHelper_1.rmdir(rootPath);
            })
                .catch((err) => {
                ExportController.log.error(err);
                reject(err);
            });
        });
    }
}
ExportController.htmlExports = [];
exports.ExportController = ExportController;
//# sourceMappingURL=data:application/json;base64,