"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const tmp = require("tmp");
const zipdir = require("zip-dir");
const fs = require("fs-extra");
const HtmlExporter = require("../export/html");
const path = require("path");
const controller_1 = require("./controller");
const bundle_1 = require("../export/bundle");
var ExportFormats;
(function (ExportFormats) {
    ExportFormats["Bundle"] = "1";
    ExportFormats["Html"] = "2";
})(ExportFormats || (ExportFormats = {}));
class ExportOptions {
    constructor(query) {
        this.executeIgPublisher = true;
        this.useTerminologyServer = false;
        this.useLatest = false;
        this.downloadOutput = true;
        this.format = 'json';
        this.exportFormat = ExportFormats.Bundle;
        if (query) {
            if (query.socketId) {
                this.socketId = query.socketId;
            }
            if (query.hasOwnProperty('executeIgPublisher')) {
                this.executeIgPublisher = query.executeIgPublisher.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useTerminologyServer')) {
                this.useTerminologyServer = query.useTerminologyServer.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useLatest')) {
                this.useLatest = query.useLatest.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('downloadOutput')) {
                this.downloadOutput = query.downloadOutput.toLowerCase === 'true';
            }
            if (query.hasOwnProperty('_format')) {
                this.format = query._format;
            }
            if (query.hasOwnProperty('exportFormat')) {
                this.exportFormat = query.exportFormat;
            }
        }
    }
}
class ExportController extends controller_1.BaseController {
    constructor(baseUrl, fhirServerId, fhir, io) {
        super();
        this.baseUrl = baseUrl;
        this.fhirServerId = fhirServerId;
        this.fhir = fhir;
        this.io = io;
    }
    static initRoutes() {
        const router = express.Router();
        router.post('/:implementationGuideId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhir, req.io);
            controller.exportImplementationGuide(req.params.implementationGuideId, new ExportOptions(req.query))
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        router.get('/:packageId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhir, req.io);
            controller.getExportedPackage(req.params.packageId)
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        return router;
    }
    exportBundle(implementationGuideId, format = 'json') {
        return new Promise((resolve, reject) => {
            const exporter = new bundle_1.BundleExporter(this.baseUrl, this.fhirServerId, this.fhir, implementationGuideId);
            exporter.export(format)
                .then((response) => {
                let fileExt = '.json';
                if (format && format === 'application/xml') {
                    fileExt = '.xml';
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-bundle' + fileExt,
                    content: response
                });
            })
                .catch((err) => reject(err));
        });
    }
    exportHtml(implementationGuideId, options) {
        return new Promise((resolve, reject) => {
            const exporter = new HtmlExporter(this.baseUrl, this.fhirServerId, this.fhir, this.io, options.socketId, implementationGuideId);
            ExportController.htmlExports.push(exporter);
            exporter.export(options.format, options.executeIgPublisher, options.useTerminologyServer, options.useLatest, options.downloadOutput)
                .then((response) => {
                resolve({
                    content: response
                });
            })
                .catch((err) => reject(err))
                .finally(() => {
                const index = ExportController.htmlExports.indexOf(exporter);
                ExportController.htmlExports.splice(index);
            });
        });
    }
    exportImplementationGuide(implementationGuideId, options) {
        switch (options.exportFormat) {
            case ExportFormats.Bundle:
                return this.exportBundle(implementationGuideId, options.format);
                break;
            case ExportFormats.Html:
                return this.exportHtml(implementationGuideId, options);
                break;
            default:
                return Promise.reject('Unexpected export format selected: ' + options.exportFormat);
        }
    }
    getExportedPackage(packageId) {
        return new Promise((resolve, reject) => {
            const rootPath = path.join(tmp.tmpdir, packageId);
            zipdir(rootPath, (err, buffer) => {
                if (err) {
                    ExportController.log.error(err);
                    fs.emptyDir(rootPath); // Asynchronously removes the temporary folder
                    return reject('An error occurred while zipping the package');
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-package.zip',
                    content: buffer
                });
                fs.emptyDir(rootPath);
                fs.rmdir(rootPath);
            });
        });
    }
}
ExportController.htmlExports = [];
exports.ExportController = ExportController;
//# sourceMappingURL=data:application/json;base64,