"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const tmp = require("tmp");
const zipdir = require("zip-dir");
const fs = require("fs-extra");
const HtmlExporter = require("../export/html");
const path = require("path");
const controller_1 = require("./controller");
const bundle_1 = require("../export/bundle");
var ExportFormats;
(function (ExportFormats) {
    ExportFormats["Bundle"] = "1";
    ExportFormats["Html"] = "2";
})(ExportFormats || (ExportFormats = {}));
class ExportOptions {
    constructor(query) {
        this.executeIgPublisher = true;
        this.useTerminologyServer = false;
        this.useLatest = false;
        this.downloadOutput = true;
        this.format = 'json';
        this.exportFormat = ExportFormats.Bundle;
        if (query) {
            if (query.socketId) {
                this.socketId = query.socketId;
            }
            if (query.hasOwnProperty('executeIgPublisher')) {
                this.executeIgPublisher = query.executeIgPublisher.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useTerminologyServer')) {
                this.useTerminologyServer = query.useTerminologyServer.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useLatest')) {
                this.useLatest = query.useLatest.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('downloadOutput')) {
                this.downloadOutput = query.downloadOutput.toLowerCase === 'true';
            }
            if (query.hasOwnProperty('_format')) {
                this.format = query._format;
            }
            if (query.hasOwnProperty('exportFormat')) {
                this.exportFormat = query.exportFormat;
            }
        }
    }
}
class ExportController extends controller_1.BaseController {
    constructor(baseUrl, fhirServerId, fhir, io) {
        super();
        this.baseUrl = baseUrl;
        this.fhirServerId = fhirServerId;
        this.fhir = fhir;
        this.io = io;
    }
    static initRoutes() {
        const router = express.Router();
        router.post('/:implementationGuideId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhir, req.io);
            controller.exportImplementationGuide(req.params.implementationGuideId, new ExportOptions(req.query))
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        router.get('/:packageId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhir, req.io);
            controller.getExportedPackage(req.params.packageId)
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        return router;
    }
    exportBundle(implementationGuideId, format = 'json') {
        return new Promise((resolve, reject) => {
            const exporter = new bundle_1.BundleExporter(this.baseUrl, this.fhirServerId, this.fhir, implementationGuideId);
            exporter.export(format)
                .then((response) => {
                let fileExt = '.json';
                if (format && format === 'application/xml') {
                    fileExt = '.xml';
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-bundle' + fileExt,
                    content: response
                });
            })
                .catch((err) => reject(err));
        });
    }
    exportHtml(implementationGuideId, options) {
        return new Promise((resolve, reject) => {
            const exporter = new HtmlExporter(this.baseUrl, this.fhirServerId, this.fhir, this.io, options.socketId, implementationGuideId);
            ExportController.htmlExports.push(exporter);
            exporter.export(options.format, options.executeIgPublisher, options.useTerminologyServer, options.useLatest, options.downloadOutput)
                .then((response) => {
                resolve({
                    content: response
                });
            })
                .catch((err) => reject(err))
                .finally(() => {
                const index = ExportController.htmlExports.indexOf(exporter);
                ExportController.htmlExports.splice(index);
            });
        });
    }
    exportImplementationGuide(implementationGuideId, options) {
        switch (options.exportFormat) {
            case ExportFormats.Bundle:
                return this.exportBundle(implementationGuideId, options.format);
                break;
            case ExportFormats.Html:
                return this.exportHtml(implementationGuideId, options);
                break;
            default:
                return Promise.reject('Unexpected export format selected: ' + options.exportFormat);
        }
    }
    getExportedPackage(packageId) {
        return new Promise((resolve, reject) => {
            const rootPath = path.join(tmp.tmpdir, packageId);
            zipdir(rootPath, (err, buffer) => {
                if (err) {
                    ExportController.log.error(err);
                    fs.emptyDir(rootPath); // Asynchronously removes the temporary folder
                    return reject('An error occurred while zipping the package');
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-package.zip',
                    content: buffer
                });
                fs.emptyDir(rootPath);
                fs.rmdir(rootPath);
            });
        });
    }
}
ExportController.htmlExports = [];
exports.ExportController = ExportController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLDJCQUEyQjtBQUMzQixrQ0FBa0M7QUFDbEMsK0JBQStCO0FBQy9CLCtDQUErQztBQUMvQyw2QkFBNkI7QUFFN0IsNkNBQTZEO0FBRzdELDZDQUFnRDtBQW9CaEQsSUFBSyxhQUdKO0FBSEQsV0FBSyxhQUFhO0lBQ2QsNkJBQVksQ0FBQTtJQUNaLDJCQUFVLENBQUE7QUFDZCxDQUFDLEVBSEksYUFBYSxLQUFiLGFBQWEsUUFHakI7QUFFRCxNQUFNLGFBQWE7SUFTZixZQUFZLEtBQVc7UUFQaEIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQzFCLHlCQUFvQixHQUFHLEtBQUssQ0FBQztRQUM3QixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLFdBQU0sR0FBcUcsTUFBTSxDQUFDO1FBQ2xILGlCQUFZLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUd2QyxJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO2FBQ2xDO1lBRUQsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDO2FBQy9FO1lBRUQsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDO2FBQ25GO1lBRUQsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFdBQVcs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TUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRWxELE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksR0FBRyxFQUFFO29CQUNMLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2hDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBYSw4Q0FBOEM7b0JBQ2pGLE9BQU8sTUFBTSxDQUFDLDZDQUE2QyxDQUFDLENBQUM7aUJBQ2hFO2dCQUVELE9BQU8sQ0FBQztvQkFDSixXQUFXLEVBQUUsMEJBQTBCO29CQUN2QyxrQkFBa0IsRUFBRSxxQ0FBcUM7b0JBQ3pELE9BQU8sRUFBRSxNQUFNO2lCQUNsQixDQUFDLENBQUM7Z0JBRUgsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDdEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUE5R00sNEJBQVcsR0FBRyxFQUFFLENBQUM7QUFENUIsNENBZ0hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgdG1wIGZyb20gJ3RtcCc7XHJcbmltcG9ydCAqIGFzIHppcGRpciBmcm9tICd6aXAtZGlyJztcclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xyXG5pbXBvcnQgKiBhcyBIdG1sRXhwb3J0ZXIgZnJvbSAnLi4vZXhwb3J0L2h0bWwnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQge0V4dGVuZGVkUmVxdWVzdH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQge0Jhc2VDb250cm9sbGVyLCBHZW5lcmljUmVzcG9uc2V9IGZyb20gJy4vY29udHJvbGxlcic7XHJcbmltcG9ydCB7Rmhpcn0gZnJvbSAnZmhpci9maGlyJztcclxuaW1wb3J0IHtTZXJ2ZXJ9IGZyb20gJ3NvY2tldC5pbyc7XHJcbmltcG9ydCB7QnVuZGxlRXhwb3J0ZXJ9IGZyb20gJy4uL2V4cG9ydC9idW5kbGUnO1xyXG5cclxuaW50ZXJmYWNlIEV4cG9ydEltcGxlbWVudGF0aW9uR3VpZGVSZXF1ZXN0IGV4dGVuZHMgRXh0ZW5kZWRSZXF1ZXN0IHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIGltcGxlbWVudGF0aW9uR3VpZGVJZDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgX2Zvcm1hdD86IHN0cmluZztcclxuICAgIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBHZXRFeHBvcnRlZFBhY2thZ2VSZXF1ZXN0IGV4dGVuZHMgRXh0ZW5kZWRSZXF1ZXN0IHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIHBhY2thZ2VJZDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgc29ja2V0SWQ/OiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcblxyXG5lbnVtIEV4cG9ydEZvcm1hdHMge1xyXG4gICAgQnVuZGxlID0gJzEnLFxyXG4gICAgSHRtbCA9ICcyJ1xyXG59XHJcblxyXG5jbGFzcyBFeHBvcnRPcHRpb25zIHtcclxuICAgIHB1YmxpYyBzb2NrZXRJZD86IHN0cmluZztcclxuICAgIHB1YmxpYyBleGVjdXRlSWdQdWJsaXNoZXIgPSB0cnVlO1xyXG4gICAgcHVibGljIHVzZVRlcm1pbm9sb2d5U2VydmVyID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgdXNlTGF0ZXN0ID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgZG93bmxvYWRPdXRwdXQgPSB0cnVlO1xyXG4gICAgcHVibGljIGZvcm1hdDogJ2pzb24nfCd4bWwnfCdhcHBsaWNhdGlvbi9qc29uJ3wnYXBwbGljYXRpb24vZmhpcitqc29uJ3wnYXBwbGljYXRpb24veG1sJ3wnYXBwbGljYXRpb24vZmhpcit4bWwnID0gJ2pzb24nO1xyXG4gICAgcHVibGljIGV4cG9ydEZvcm1hdCA9IEV4cG9ydEZvcm1hdHMuQnVuZGxlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHF1ZXJ5PzogYW55KSB7XHJcbiAgICAgICAgaWYgKHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5zb2NrZXRJZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXRJZCA9IHF1ZXJ5LnNvY2tldElkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJ2V4ZWN1dGVJZ1B1Ymxpc2hlcicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVJZ1B1Ymxpc2hlciA9IHF1ZXJ5LmV4ZWN1dGVJZ1B1Ymxpc2hlci50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5oYXNPd25Qcm9wZXJ0eSgndXNlVGVybWlub2xvZ3lTZXJ2ZXInKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VUZXJtaW5vbG9neVNlcnZlciA9IHF1ZXJ5LnVzZVRlcm1pbm9sb2d5U2VydmVyLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCd1c2VMYXRlc3QnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VMYXRlc3QgPSBxdWVyeS51c2VMYXRlc3QudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJ2Rvd25sb2FkT3V0cHV0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRPdXRwdXQgPSBxdWVyeS5kb3dubG9hZE91dHB1dC50b0xvd2VyQ2FzZSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJ19mb3JtYXQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtYXQgPSBxdWVyeS5fZm9ybWF0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJ2V4cG9ydEZvcm1hdCcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4cG9ydEZvcm1hdCA9IHF1ZXJ5LmV4cG9ydEZvcm1hdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEV4cG9ydENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XHJcbiAgICBzdGF0aWMgaHRtbEV4cG9ydHMgPSBbXTtcclxuXHJcbiAgICByZWFkb25seSBiYXNlVXJsOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBmaGlyU2VydmVySWQ6IHN0cmluZztcclxuICAgIHJlYWRvbmx5IGZoaXI6IEZoaXI7XHJcbiAgICByZWFkb25seSBpbzogU2VydmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGJhc2VVcmw6IHN0cmluZywgZmhpclNlcnZlcklkOiBzdHJpbmcsIGZoaXI6IEZoaXIsIGlvOiBTZXJ2ZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICAgICAgdGhpcy5maGlyU2VydmVySWQgPSBmaGlyU2VydmVySWQ7XHJcbiAgICAgICAgdGhpcy5maGlyID0gZmhpcjtcclxuICAgICAgICB0aGlzLmlvID0gaW87XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpbml0Um91dGVzKCkge1xyXG4gICAgICAgIGNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcblxyXG4gICAgICAgIHJvdXRlci5wb3N0KCcvOmltcGxlbWVudGF0aW9uR3VpZGVJZCcsIDxSZXF1ZXN0SGFuZGxlcj4gKHJlcTogRXhwb3J0SW1wbGVtZW50YXRpb25HdWlkZVJlcXVlc3QsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEV4cG9ydENvbnRyb2xsZXIocmVxLmZoaXJTZXJ2ZXJCYXNlLCByZXEuaGVhZGVycy5maGlyc2VydmVyLCByZXEuZmhpciwgcmVxLmlvKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5leHBvcnRJbXBsZW1lbnRhdGlvbkd1aWRlKHJlcS5wYXJhbXMuaW1wbGVtZW50YXRpb25HdWlkZUlkLCBuZXcgRXhwb3J0T3B0aW9ucyhyZXEucXVlcnkpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHM6IEdlbmVyaWNSZXNwb25zZSkgPT4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXMsIHJlc3VsdHMpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IEV4cG9ydENvbnRyb2xsZXIuaGFuZGxlRXJyb3IoZXJyLCBudWxsLCByZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcm91dGVyLmdldCgnLzpwYWNrYWdlSWQnLCA8UmVxdWVzdEhhbmRsZXI+IChyZXE6IEdldEV4cG9ydGVkUGFja2FnZVJlcXVlc3QsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEV4cG9ydENvbnRyb2xsZXIocmVxLmZoaXJTZXJ2ZXJCYXNlLCByZXEuaGVhZGVycy5maGlyc2VydmVyLCByZXEuZmhpciwgcmVxLmlvKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5nZXRFeHBvcnRlZFBhY2thZ2UocmVxLnBhcmFtcy5wYWNrYWdlSWQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0czogR2VuZXJpY1Jlc3BvbnNlKSA9PiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlcywgcmVzdWx0cykpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gRXhwb3J0Q29udHJvbGxlci5oYW5kbGVFcnJvcihlcnIsIG51bGwsIHJlcykpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcm91dGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXhwb3J0QnVuZGxlKGltcGxlbWVudGF0aW9uR3VpZGVJZDogc3RyaW5nLCBmb3JtYXQ6ICdqc29uJ3wneG1sJ3wnYXBwbGljYXRpb24vanNvbid8J2FwcGxpY2F0aW9uL2ZoaXIranNvbid8J2FwcGxpY2F0aW9uL3htbCd8J2FwcGxpY2F0aW9uL2ZoaXIreG1sJyA9ICdqc29uJykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxHZW5lcmljUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXhwb3J0ZXIgPSBuZXcgQnVuZGxlRXhwb3J0ZXIodGhpcy5iYXNlVXJsLCB0aGlzLmZoaXJTZXJ2ZXJJZCwgdGhpcy5maGlyLCBpbXBsZW1lbnRhdGlvbkd1aWRlSWQpO1xyXG4gICAgICAgICAgICBleHBvcnRlci5leHBvcnQoZm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVFeHQgPSAnLmpzb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0ICYmIGZvcm1hdCA9PT0gJ2FwcGxpY2F0aW9uL3htbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUV4dCA9ICcueG1sJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnREaXNwb3NpdGlvbjogJ2F0dGFjaG1lbnQ7IGZpbGVuYW1lPWlnLWJ1bmRsZScgKyBmaWxlRXh0LCAgICAgIC8vIFRPRE86IERldGVybWluZSBmaWxlIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogcmVzcG9uc2VcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXhwb3J0SHRtbChpbXBsZW1lbnRhdGlvbkd1aWRlSWQ6IHN0cmluZywgb3B0aW9uczogRXhwb3J0T3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxHZW5lcmljUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXhwb3J0ZXIgPSBuZXcgSHRtbEV4cG9ydGVyKHRoaXMuYmFzZVVybCwgdGhpcy5maGlyU2VydmVySWQsIHRoaXMuZmhpciwgdGhpcy5pbywgb3B0aW9ucy5zb2NrZXRJZCwgaW1wbGVtZW50YXRpb25HdWlkZUlkKTtcclxuXHJcbiAgICAgICAgICAgIEV4cG9ydENvbnRyb2xsZXIuaHRtbEV4cG9ydHMucHVzaChleHBvcnRlcik7XHJcblxyXG4gICAgICAgICAgICBleHBvcnRlci5leHBvcnQob3B0aW9ucy5mb3JtYXQsIG9wdGlvbnMuZXhlY3V0ZUlnUHVibGlzaGVyLCBvcHRpb25zLnVzZVRlcm1pbm9sb2d5U2VydmVyLCBvcHRpb25zLnVzZUxhdGVzdCwgb3B0aW9ucy5kb3dubG9hZE91dHB1dClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZXNwb25zZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSlcclxuICAgICAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IEV4cG9ydENvbnRyb2xsZXIuaHRtbEV4cG9ydHMuaW5kZXhPZihleHBvcnRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgRXhwb3J0Q29udHJvbGxlci5odG1sRXhwb3J0cy5zcGxpY2UoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV4cG9ydEltcGxlbWVudGF0aW9uR3VpZGUoaW1wbGVtZW50YXRpb25HdWlkZUlkOiBzdHJpbmcsIG9wdGlvbnM6IEV4cG9ydE9wdGlvbnMpOiBQcm9taXNlPEdlbmVyaWNSZXNwb25zZT4ge1xyXG4gICAgICAgIHN3aXRjaCAob3B0aW9ucy5leHBvcnRGb3JtYXQpIHtcclxuICAgICAgICAgICAgY2FzZSBFeHBvcnRGb3JtYXRzLkJ1bmRsZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cG9ydEJ1bmRsZShpbXBsZW1lbnRhdGlvbkd1aWRlSWQsIG9wdGlvbnMuZm9ybWF0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEV4cG9ydEZvcm1hdHMuSHRtbDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cG9ydEh0bWwoaW1wbGVtZW50YXRpb25HdWlkZUlkLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdVbmV4cGVjdGVkIGV4cG9ydCBmb3JtYXQgc2VsZWN0ZWQ6ICcgKyBvcHRpb25zLmV4cG9ydEZvcm1hdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRFeHBvcnRlZFBhY2thZ2UocGFja2FnZUlkOiBzdHJpbmcpOiBQcm9taXNlPEdlbmVyaWNSZXNwb25zZT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvb3RQYXRoID0gcGF0aC5qb2luKHRtcC50bXBkaXIsIHBhY2thZ2VJZCk7XHJcblxyXG4gICAgICAgICAgICB6aXBkaXIocm9vdFBhdGgsIChlcnIsIGJ1ZmZlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIEV4cG9ydENvbnRyb2xsZXIubG9nLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgZnMuZW1wdHlEaXIocm9vdFBhdGgpOyAgICAgICAgICAgICAvLyBBc3luY2hyb25vdXNseSByZW1vdmVzIHRoZSB0ZW1wb3JhcnkgZm9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgemlwcGluZyB0aGUgcGFja2FnZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb246ICdhdHRhY2htZW50OyBmaWxlbmFtZT1pZy1wYWNrYWdlLnppcCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogYnVmZmVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBmcy5lbXB0eURpcihyb290UGF0aCk7XHJcbiAgICAgICAgICAgICAgICBmcy5ybWRpcihyb290UGF0aCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19