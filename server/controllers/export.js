"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const tmp = require("tmp");
const zipdir = require("zip-dir");
const fs = require("fs-extra");
const BundleExporter = require("../export/bundle");
const HtmlExporter = require("../export/html");
const path = require("path");
const controller_1 = require("./controller");
var ExportFormats;
(function (ExportFormats) {
    ExportFormats["Bundle"] = "1";
    ExportFormats["Html"] = "2";
})(ExportFormats || (ExportFormats = {}));
class ExportOptions {
    constructor(query) {
        this.executeIgPublisher = true;
        this.useTerminologyServer = false;
        this.useLatest = false;
        this.downloadOutput = true;
        this.exportFormat = ExportFormats.Bundle;
        if (query) {
            if (query.socketId) {
                this.socketId = query.socketId;
            }
            if (query.hasOwnProperty('executeIgPublisher')) {
                this.executeIgPublisher = query.executeIgPublisher.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useTerminologyServer')) {
                this.useTerminologyServer = query.useTerminologyServer.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('useLatest')) {
                this.useLatest = query.useLatest.toLowerCase() === 'true';
            }
            if (query.hasOwnProperty('downloadOutput')) {
                this.downloadOutput = query.downloadOutput.toLowerCase === 'true';
            }
            if (query.hasOwnProperty('_format')) {
                this.format = query._format;
            }
            if (query.hasOwnProperty('exportFormat')) {
                this.exportFormat = query.exportFormat;
            }
        }
    }
}
class ExportController extends controller_1.BaseController {
    constructor(baseUrl, fhirServerId, fhir, io) {
        super();
        this.baseUrl = baseUrl;
        this.fhirServerId = fhirServerId;
        this.fhir = fhir;
        this.io = io;
    }
    static initRoutes() {
        const router = express.Router();
        router.post('/:implementationGuideId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhir, req.io);
            controller.exportImplementationGuide(req.params.implementationGuideId, new ExportOptions(req.query))
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        router.get('/:packageId', (req, res) => {
            const controller = new ExportController(req.fhirServerBase, req.headers.fhirserver, req.fhir, req.io);
            controller.getExportedPackage(req.params.packageId)
                .then((results) => this.handleResponse(res, results))
                .catch((err) => ExportController.handleError(err, null, res));
        });
        return router;
    }
    exportBundle(implementationGuideId, format) {
        return new Promise((resolve, reject) => {
            const exporter = new BundleExporter(this.baseUrl, this.fhirServerId, this.fhir, implementationGuideId);
            exporter.export(format)
                .then((response) => {
                let fileExt = '.json';
                if (format && format === 'application/xml') {
                    fileExt = '.xml';
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-bundle' + fileExt,
                    content: response
                });
            })
                .catch((err) => reject(err));
        });
    }
    exportHtml(implementationGuideId, options) {
        return new Promise((resolve, reject) => {
            const exporter = new HtmlExporter(this.baseUrl, this.fhirServerId, this.fhir, this.io, options.socketId, implementationGuideId);
            ExportController.htmlExports.push(exporter);
            exporter.export(options.format, options.executeIgPublisher, options.useTerminologyServer, options.useLatest, options.downloadOutput)
                .then((response) => {
                resolve({
                    content: response
                });
            })
                .catch((err) => reject(err))
                .finally(() => {
                const index = ExportController.htmlExports.indexOf(exporter);
                ExportController.htmlExports.splice(index);
            });
        });
    }
    exportImplementationGuide(implementationGuideId, options) {
        switch (options.exportFormat) {
            case ExportFormats.Bundle:
                return this.exportBundle(implementationGuideId, options.format);
                break;
            case ExportFormats.Html:
                return this.exportHtml(implementationGuideId, options);
                break;
            default:
                return Promise.reject('Unexpected export format selected: ' + options.exportFormat);
        }
    }
    getExportedPackage(packageId) {
        return new Promise((resolve, reject) => {
            const rootPath = path.join(tmp.tmpdir, packageId);
            zipdir(rootPath, (err, buffer) => {
                if (err) {
                    ExportController.log.error(err);
                    fs.emptyDir(rootPath); // Asynchronously removes the temporary folder
                    return reject('An error occurred while zipping the package');
                }
                resolve({
                    contentType: 'application/octet-stream',
                    contentDisposition: 'attachment; filename=ig-package.zip',
                    content: buffer
                });
                fs.emptyDir(rootPath);
                fs.rmdir(rootPath);
            });
        });
    }
}
ExportController.htmlExports = [];
exports.ExportController = ExportController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLDJCQUEyQjtBQUMzQixrQ0FBa0M7QUFDbEMsK0JBQStCO0FBQy9CLG1EQUFtRDtBQUNuRCwrQ0FBK0M7QUFDL0MsNkJBQTZCO0FBRTdCLDZDQUE2RDtBQXVCN0QsSUFBSyxhQUdKO0FBSEQsV0FBSyxhQUFhO0lBQ2QsNkJBQVksQ0FBQTtJQUNaLDJCQUFVLENBQUE7QUFDZCxDQUFDLEVBSEksYUFBYSxLQUFiLGFBQWEsUUFHakI7QUFFRDtJQVNJLFlBQVksS0FBVztRQVBoQix1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIseUJBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQzdCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFFdEIsaUJBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBR3ZDLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7YUFDbEM7WUFFRCxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUM7YUFDL0U7WUFFRCxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUM7YUFDbkY7WUFFRCxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcs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SSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFbEQsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDN0IsSUFBSSxHQUFHLEVBQUU7b0JBQ0wsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDaEMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFhLDhDQUE4QztvQkFDakYsT0FBTyxNQUFNLENBQUMsNkNBQTZDLENBQUMsQ0FBQztpQkFDaEU7Z0JBRUQsT0FBTyxDQUFDO29CQUNKLFdBQVcsRUFBRSwwQkFBMEI7b0JBQ3ZDLGtCQUFrQixFQUFFLHFDQUFxQztvQkFDekQsT0FBTyxFQUFFLE1BQU07aUJBQ2xCLENBQUMsQ0FBQztnQkFFSCxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0QixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQTlHTSw0QkFBVyxHQUFHLEVBQUUsQ0FBQztBQUQ1Qiw0Q0FnSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyB0bXAgZnJvbSAndG1wJztcclxuaW1wb3J0ICogYXMgemlwZGlyIGZyb20gJ3ppcC1kaXInO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XHJcbmltcG9ydCAqIGFzIEJ1bmRsZUV4cG9ydGVyIGZyb20gJy4uL2V4cG9ydC9idW5kbGUnO1xyXG5pbXBvcnQgKiBhcyBIdG1sRXhwb3J0ZXIgZnJvbSAnLi4vZXhwb3J0L2h0bWwnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQge0V4dGVuZGVkUmVxdWVzdH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQge0Jhc2VDb250cm9sbGVyLCBHZW5lcmljUmVzcG9uc2V9IGZyb20gJy4vY29udHJvbGxlcic7XHJcbmltcG9ydCB7Rmhpcn0gZnJvbSAnZmhpci9maGlyJztcclxuaW1wb3J0IHtTZXJ2ZXJ9IGZyb20gJ3NvY2tldC5pbyc7XHJcbmltcG9ydCB7UmVzcG9uc2V9IGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuaW50ZXJmYWNlIEV4cG9ydEltcGxlbWVudGF0aW9uR3VpZGVSZXF1ZXN0IGV4dGVuZHMgRXh0ZW5kZWRSZXF1ZXN0IHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIGltcGxlbWVudGF0aW9uR3VpZGVJZDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgX2Zvcm1hdD86IHN0cmluZztcclxuICAgIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBHZXRFeHBvcnRlZFBhY2thZ2VSZXF1ZXN0IGV4dGVuZHMgRXh0ZW5kZWRSZXF1ZXN0IHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIHBhY2thZ2VJZDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgc29ja2V0SWQ/OiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcblxyXG5lbnVtIEV4cG9ydEZvcm1hdHMge1xyXG4gICAgQnVuZGxlID0gJzEnLFxyXG4gICAgSHRtbCA9ICcyJ1xyXG59XHJcblxyXG5jbGFzcyBFeHBvcnRPcHRpb25zIHtcclxuICAgIHB1YmxpYyBzb2NrZXRJZD86IHN0cmluZztcclxuICAgIHB1YmxpYyBleGVjdXRlSWdQdWJsaXNoZXIgPSB0cnVlO1xyXG4gICAgcHVibGljIHVzZVRlcm1pbm9sb2d5U2VydmVyID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgdXNlTGF0ZXN0ID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgZG93bmxvYWRPdXRwdXQgPSB0cnVlO1xyXG4gICAgcHVibGljIGZvcm1hdD86IHN0cmluZztcclxuICAgIHB1YmxpYyBleHBvcnRGb3JtYXQgPSBFeHBvcnRGb3JtYXRzLkJ1bmRsZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihxdWVyeT86IGFueSkge1xyXG4gICAgICAgIGlmIChxdWVyeSkge1xyXG4gICAgICAgICAgICBpZiAocXVlcnkuc29ja2V0SWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0SWQgPSBxdWVyeS5zb2NrZXRJZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCdleGVjdXRlSWdQdWJsaXNoZXInKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlSWdQdWJsaXNoZXIgPSBxdWVyeS5leGVjdXRlSWdQdWJsaXNoZXIudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJ3VzZVRlcm1pbm9sb2d5U2VydmVyJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXNlVGVybWlub2xvZ3lTZXJ2ZXIgPSBxdWVyeS51c2VUZXJtaW5vbG9neVNlcnZlci50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5oYXNPd25Qcm9wZXJ0eSgndXNlTGF0ZXN0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXNlTGF0ZXN0ID0gcXVlcnkudXNlTGF0ZXN0LnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCdkb3dubG9hZE91dHB1dCcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkT3V0cHV0ID0gcXVlcnkuZG93bmxvYWRPdXRwdXQudG9Mb3dlckNhc2UgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCdfZm9ybWF0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybWF0ID0gcXVlcnkuX2Zvcm1hdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCdleHBvcnRGb3JtYXQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHBvcnRGb3JtYXQgPSBxdWVyeS5leHBvcnRGb3JtYXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFeHBvcnRDb250cm9sbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xyXG4gICAgc3RhdGljIGh0bWxFeHBvcnRzID0gW107XHJcblxyXG4gICAgcmVhZG9ubHkgYmFzZVVybDogc3RyaW5nO1xyXG4gICAgcmVhZG9ubHkgZmhpclNlcnZlcklkOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBmaGlyOiBGaGlyO1xyXG4gICAgcmVhZG9ubHkgaW86IFNlcnZlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihiYXNlVXJsOiBzdHJpbmcsIGZoaXJTZXJ2ZXJJZDogc3RyaW5nLCBmaGlyOiBGaGlyLCBpbzogU2VydmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgICAgIHRoaXMuZmhpclNlcnZlcklkID0gZmhpclNlcnZlcklkO1xyXG4gICAgICAgIHRoaXMuZmhpciA9IGZoaXI7XHJcbiAgICAgICAgdGhpcy5pbyA9IGlvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdFJvdXRlcygpIHtcclxuICAgICAgICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5cclxuICAgICAgICByb3V0ZXIucG9zdCgnLzppbXBsZW1lbnRhdGlvbkd1aWRlSWQnLCA8UmVxdWVzdEhhbmRsZXI+IChyZXE6IEV4cG9ydEltcGxlbWVudGF0aW9uR3VpZGVSZXF1ZXN0LCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBFeHBvcnRDb250cm9sbGVyKHJlcS5maGlyU2VydmVyQmFzZSwgcmVxLmhlYWRlcnMuZmhpcnNlcnZlciwgcmVxLmZoaXIsIHJlcS5pbyk7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZXhwb3J0SW1wbGVtZW50YXRpb25HdWlkZShyZXEucGFyYW1zLmltcGxlbWVudGF0aW9uR3VpZGVJZCwgbmV3IEV4cG9ydE9wdGlvbnMocmVxLnF1ZXJ5KSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzOiBHZW5lcmljUmVzcG9uc2UpID0+IHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzLCByZXN1bHRzKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBFeHBvcnRDb250cm9sbGVyLmhhbmRsZUVycm9yKGVyciwgbnVsbCwgcmVzKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJvdXRlci5nZXQoJy86cGFja2FnZUlkJywgPFJlcXVlc3RIYW5kbGVyPiAocmVxOiBHZXRFeHBvcnRlZFBhY2thZ2VSZXF1ZXN0LCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBFeHBvcnRDb250cm9sbGVyKHJlcS5maGlyU2VydmVyQmFzZSwgcmVxLmhlYWRlcnMuZmhpcnNlcnZlciwgcmVxLmZoaXIsIHJlcS5pbyk7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZ2V0RXhwb3J0ZWRQYWNrYWdlKHJlcS5wYXJhbXMucGFja2FnZUlkKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHM6IEdlbmVyaWNSZXNwb25zZSkgPT4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXMsIHJlc3VsdHMpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IEV4cG9ydENvbnRyb2xsZXIuaGFuZGxlRXJyb3IoZXJyLCBudWxsLCByZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJvdXRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV4cG9ydEJ1bmRsZShpbXBsZW1lbnRhdGlvbkd1aWRlSWQ6IHN0cmluZywgZm9ybWF0Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEdlbmVyaWNSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHBvcnRlciA9IG5ldyBCdW5kbGVFeHBvcnRlcih0aGlzLmJhc2VVcmwsIHRoaXMuZmhpclNlcnZlcklkLCB0aGlzLmZoaXIsIGltcGxlbWVudGF0aW9uR3VpZGVJZCk7XHJcbiAgICAgICAgICAgIGV4cG9ydGVyLmV4cG9ydChmb3JtYXQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZUV4dCA9ICcuanNvbic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgJiYgZm9ybWF0ID09PSAnYXBwbGljYXRpb24veG1sJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlRXh0ID0gJy54bWwnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uOiAnYXR0YWNobWVudDsgZmlsZW5hbWU9aWctYnVuZGxlJyArIGZpbGVFeHQsICAgICAgLy8gVE9ETzogRGV0ZXJtaW5lIGZpbGUgbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZXNwb25zZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBleHBvcnRIdG1sKGltcGxlbWVudGF0aW9uR3VpZGVJZDogc3RyaW5nLCBvcHRpb25zOiBFeHBvcnRPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEdlbmVyaWNSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHBvcnRlciA9IG5ldyBIdG1sRXhwb3J0ZXIodGhpcy5iYXNlVXJsLCB0aGlzLmZoaXJTZXJ2ZXJJZCwgdGhpcy5maGlyLCB0aGlzLmlvLCBvcHRpb25zLnNvY2tldElkLCBpbXBsZW1lbnRhdGlvbkd1aWRlSWQpO1xyXG5cclxuICAgICAgICAgICAgRXhwb3J0Q29udHJvbGxlci5odG1sRXhwb3J0cy5wdXNoKGV4cG9ydGVyKTtcclxuXHJcbiAgICAgICAgICAgIGV4cG9ydGVyLmV4cG9ydChvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy5leGVjdXRlSWdQdWJsaXNoZXIsIG9wdGlvbnMudXNlVGVybWlub2xvZ3lTZXJ2ZXIsIG9wdGlvbnMudXNlTGF0ZXN0LCBvcHRpb25zLmRvd25sb2FkT3V0cHV0KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKVxyXG4gICAgICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gRXhwb3J0Q29udHJvbGxlci5odG1sRXhwb3J0cy5pbmRleE9mKGV4cG9ydGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBFeHBvcnRDb250cm9sbGVyLmh0bWxFeHBvcnRzLnNwbGljZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXhwb3J0SW1wbGVtZW50YXRpb25HdWlkZShpbXBsZW1lbnRhdGlvbkd1aWRlSWQ6IHN0cmluZywgb3B0aW9uczogRXhwb3J0T3B0aW9ucyk6IFByb21pc2U8R2VuZXJpY1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLmV4cG9ydEZvcm1hdCkge1xyXG4gICAgICAgICAgICBjYXNlIEV4cG9ydEZvcm1hdHMuQnVuZGxlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0QnVuZGxlKGltcGxlbWVudGF0aW9uR3VpZGVJZCwgb3B0aW9ucy5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRXhwb3J0Rm9ybWF0cy5IdG1sOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0SHRtbChpbXBsZW1lbnRhdGlvbkd1aWRlSWQsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ1VuZXhwZWN0ZWQgZXhwb3J0IGZvcm1hdCBzZWxlY3RlZDogJyArIG9wdGlvbnMuZXhwb3J0Rm9ybWF0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEV4cG9ydGVkUGFja2FnZShwYWNrYWdlSWQ6IHN0cmluZyk6IFByb21pc2U8R2VuZXJpY1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdFBhdGggPSBwYXRoLmpvaW4odG1wLnRtcGRpciwgcGFja2FnZUlkKTtcclxuXHJcbiAgICAgICAgICAgIHppcGRpcihyb290UGF0aCwgKGVyciwgYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRXhwb3J0Q29udHJvbGxlci5sb2cuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICBmcy5lbXB0eURpcihyb290UGF0aCk7ICAgICAgICAgICAgIC8vIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgdGhlIHRlbXBvcmFyeSBmb2xkZXJcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB6aXBwaW5nIHRoZSBwYWNrYWdlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnREaXNwb3NpdGlvbjogJ2F0dGFjaG1lbnQ7IGZpbGVuYW1lPWlnLXBhY2thZ2UuemlwJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBidWZmZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZzLmVtcHR5RGlyKHJvb3RQYXRoKTtcclxuICAgICAgICAgICAgICAgIGZzLnJtZGlyKHJvb3RQYXRoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=