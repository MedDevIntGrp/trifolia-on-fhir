"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = require("./controller");
const express = require("express");
const authHelper_1 = require("../authHelper");
const request = require("request");
const rp = require("request-promise");
const FhirHelper = require("../fhirHelper");
class FhirAPIController extends controller_1.BaseController {
    constructor(baseUrl) {
        super();
        this.baseUrl = baseUrl;
    }
    static initRoutes() {
        const router = express.Router();
        router.post('/:resourceType/:id/([\$])change-id', authHelper_1.checkJwt, (req, res) => {
            const controller = new FhirAPIController(req.fhirServerBase);
            controller.changeId(req.params.resourceType, req.params.id, req.query.newId)
                .then((results) => res.send(results))
                .catch((err) => res.status(500).send(err));
        });
        router.use(authHelper_1.checkJwt, (req, res) => {
            const controller = new FhirAPIController(req.fhirServerBase);
            controller.proxy(req.method, req.url, req.headers, req.query, req.body)
                .then((results) => {
                if (results.contentType) {
                    res.contentType(results.contentType);
                }
                res.status(results.status).send(results.body);
            })
                .catch((err) => res.status(500).send(err));
        });
        return router;
    }
    proxy(method, url, headers, query, body) {
        let proxyUrl = this.baseUrl;
        if (proxyUrl.endsWith('/')) {
            proxyUrl = proxyUrl.substring(0, proxyUrl.length - 1);
        }
        proxyUrl += url;
        const proxyHeaders = JSON.parse(JSON.stringify(headers));
        delete proxyHeaders['authorization'];
        delete proxyHeaders['fhirserver'];
        delete proxyHeaders['host'];
        delete proxyHeaders['origin'];
        delete proxyHeaders['referer'];
        delete proxyHeaders['user-agent'];
        delete proxyHeaders['content-length'];
        delete proxyHeaders['cookie'];
        delete proxyHeaders['connection'];
        proxyHeaders['Cache-Control'] = 'no-cache';
        const options = {
            url: proxyUrl,
            method: method,
            headers: proxyHeaders,
            body: undefined,
            encoding: 'utf8',
            gzip: false
        };
        if (method !== 'GET' && method !== 'DELETE') {
            options.body = body;
        }
        if (proxyHeaders['accept-encoding'] && proxyHeaders['accept-encoding'].indexOf('gzip') >= 0) {
            options.gzip = true;
        }
        return new Promise((resolve, reject) => {
            request(options, (err, response, body) => {
                resolve({
                    status: response.statusCode,
                    body: body,
                    contentType: response.headers ? response.headers['content-type'] : undefined
                });
            });
        });
    }
    changeId(resourceType, currentId, newId) {
        return new Promise((resolve, reject) => {
            if (!newId) {
                return reject({ statusCode: 400, message: 'You must specify a "newId" to change the id of the resource' });
            }
            const currentOptions = {
                url: FhirHelper.buildUrl(this.baseUrl, resourceType, currentId),
                method: 'GET',
                json: true
            };
            FhirAPIController.log.trace(`Request to change id for resource ${resourceType}/${currentId} to ${newId}`);
            // Get the current state of the resource
            rp(currentOptions)
                .then((resource) => {
                if (!resource || !resource.id) {
                    throw new Error(`No resource found for ${resourceType} with id ${currentId}`);
                }
                // Change the id of the resource
                resource.id = newId;
                const createOptions = {
                    url: FhirHelper.buildUrl(this.baseUrl, resourceType, newId),
                    method: 'PUT',
                    json: true,
                    body: resource
                };
                FhirAPIController.log.trace('Sending PUT request to FHIR server with the new resource ID');
                // Create the new resource with the new id
                return rp(createOptions);
            })
                .then(() => {
                const deleteOptions = {
                    url: FhirHelper.buildUrl(this.baseUrl, resourceType, currentId),
                    method: 'DELETE',
                    json: true
                };
                FhirAPIController.log.trace('Sending DELETE request to FHIR server for original resource');
                // Delete the original resource with the original id
                return rp(deleteOptions);
            })
                .then(() => {
                FhirAPIController.log.trace(`Successfully changed the id of ${resourceType}/${currentId} to ${resourceType}/${newId}`);
                resolve(`Successfully changed the id of ${resourceType}/${currentId} to ${resourceType}/${newId}`);
            })
                .catch((err) => reject(err));
        });
    }
}
exports.FhirAPIController = FhirAPIController;
//# sourceMappingURL=data:application/json;base64,