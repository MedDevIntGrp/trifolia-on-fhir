"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const AuthHelper = require("../authHelper");
const FhirHelper = require("../fhirHelper");
const rp = require("request-promise");
const _ = require("underscore");
const nanoid = require("nanoid");
const fhirLogic_1 = require("./fhirLogic");
class PractitionerController extends fhirLogic_1.FhirLogic {
    static initRoutes() {
        const router = express.Router();
        router.get('/me', AuthHelper.checkJwt, (req, res) => {
            const controller = new PractitionerController('Practitioner', req.fhirServerBase);
            controller.getMyPractitioner(req.user)
                .then((results) => res.send(results))
                .catch((err) => PractitionerController.handleError(err, null, res));
        });
        router.post('/me', AuthHelper.checkJwt, (req, res) => {
            const controller = new PractitionerController('Practitioner', req.fhirServerBase);
            controller.updateMyPractitioner(req.user, req.body)
                .then((results) => res.send(results))
                .catch((err) => PractitionerController.handleError(err, null, res));
        });
        return super.initRoutes('Practitioner', router);
    }
    updateMyPractitioner(userInfo, practitioner) {
        return new Promise((resolve, reject) => {
            this.getMyPractitioner(userInfo, true)
                .then((existingPractitioner) => {
                const authUser = userInfo.sub;
                let system = '';
                let value = authUser;
                if (authUser.startsWith('auth0|')) {
                    system = 'https://auth0.com';
                    value = authUser.substring(6);
                }
                if (!practitioner.identifier) {
                    practitioner.identifier = [];
                }
                const foundIdentifier = _.find(practitioner.identifier, (identifier) => {
                    return identifier.system === system && identifier.value === value;
                });
                if (!foundIdentifier) {
                    practitioner.identifier.push({
                        system: system,
                        value: value
                    });
                }
                if (existingPractitioner && existingPractitioner.id) {
                    practitioner.id = existingPractitioner.id;
                }
                else {
                    practitioner.id = nanoid(8);
                }
                const practitionerRequest = {
                    url: FhirHelper.buildUrl(this.baseUrl, this.resourceType, practitioner.id),
                    method: 'PUT',
                    body: practitioner,
                    json: true,
                    resolveWithFullResponse: true
                };
                return rp(practitionerRequest);
            })
                .then((results) => {
                const location = results.headers.location || results.headers['content-location'];
                if (!location) {
                    throw new Error(`FHIR server did not respond with a location to the newly created ${this.resourceType}`);
                }
                return rp({
                    url: location,
                    method: 'GET',
                    json: true
                });
            })
                .then((results) => resolve(results))
                .catch((err) => reject(err));
        });
    }
    getMyPractitioner(userInfo, resolveIfNotFound = false) {
        return new Promise((resolve, reject) => {
            let system = '';
            let identifier = userInfo.sub;
            if (identifier.startsWith('auth0|')) {
                system = 'https://auth0.com';
                identifier = identifier.substring(6);
            }
            const url = FhirHelper.buildUrl(this.baseUrl, this.resourceType, null, null, { identifier: system + '|' + identifier });
            const options = {
                url: url,
                json: true,
                headers: {
                    'Cache-Control': 'no-cache'
                }
            };
            rp(options)
                .then((bundle) => {
                if (bundle.total === 0) {
                    if (!resolveIfNotFound) {
                        return reject({
                            statusCode: 404,
                            message: 'No practitioner was found associated with the authenticated user'
                        });
                    }
                    else {
                        return resolve();
                    }
                }
                if (bundle.total > 1) {
                    PractitionerController.log.warn(`Expected a single ${this.resourceType} resource to be found with identifier ${system}|${identifier}`);
                }
                resolve(bundle.entry[0].resource);
            })
                .catch((err) => reject(err));
        });
    }
}
exports.PractitionerController = PractitionerController;
//# sourceMappingURL=data:application/json;base64,